
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003e0e  00003ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000f6  008000f6  00003f38  2**0
                  ALLOC
  3 .stab         00003660  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124b  00000000  00000000  00007598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000087e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c374  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c761  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <main>
      8a:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_init>:

#include "gpio.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
TCNT1=Config_Ptr->initial_value ;
     b54:	ac e4       	ldi	r26, 0x4C	; 76
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	9c 93       	st	X, r25
     b64:	8e 93       	st	-X, r24

OCR1A=Config_Ptr->compare_value ;
     b66:	aa e4       	ldi	r26, 0x4A	; 74
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	11 96       	adiw	r26, 0x01	; 1
     b74:	9c 93       	st	X, r25
     b76:	8e 93       	st	-X, r24

TCCR1A=(((Config_Ptr->mode)&3))|(1<<FOC1A) ;
     b78:	af e4       	ldi	r26, 0x4F	; 79
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	85 81       	ldd	r24, Z+5	; 0x05
     b82:	83 70       	andi	r24, 0x03	; 3
     b84:	88 60       	ori	r24, 0x08	; 8
     b86:	8c 93       	st	X, r24

TCCR1B=(Config_Ptr->prescaler)|(((Config_Ptr->mode)>>2)<<3);
     b88:	ae e4       	ldi	r26, 0x4E	; 78
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e9 81       	ldd	r30, Y+1	; 0x01
     b8e:	fa 81       	ldd	r31, Y+2	; 0x02
     b90:	84 81       	ldd	r24, Z+4	; 0x04
     b92:	28 2f       	mov	r18, r24
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	85 81       	ldd	r24, Z+5	; 0x05
     b9a:	86 95       	lsr	r24
     b9c:	86 95       	lsr	r24
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	82 2b       	or	r24, r18
     bb0:	8c 93       	st	X, r24

if((Config_Ptr->mode)==Normal){
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	88 23       	and	r24, r24
     bba:	29 f4       	brne	.+10     	; 0xbc6 <Timer1_init+0x80>

	TIMSK=(1<<TOIE1);
     bbc:	e9 e5       	ldi	r30, 0x59	; 89
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	80 83       	st	Z, r24
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <Timer1_init+0x92>

}else if ((Config_Ptr->mode)==CTC){
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	85 81       	ldd	r24, Z+5	; 0x05
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	21 f4       	brne	.+8      	; 0xbd8 <Timer1_init+0x92>

	TIMSK=(1<<OCIE1A);
     bd0:	e9 e5       	ldi	r30, 0x59	; 89
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 e1       	ldi	r24, 0x10	; 16
     bd6:	80 83       	st	Z, r24

}

}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <Timer1_deInit>:
void Timer1_deInit(void) {
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	TIMSK =OFF  ;
     bea:	e9 e5       	ldi	r30, 0x59	; 89
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	10 82       	st	Z, r1
	TCNT1 =OFF  ;
     bf0:	ec e4       	ldi	r30, 0x4C	; 76
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	11 82       	std	Z+1, r1	; 0x01
     bf6:	10 82       	st	Z, r1
	TCCR1B=OFF ;
     bf8:	ee e4       	ldi	r30, 0x4E	; 78
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	10 82       	st	Z, r1
	TCCR1A=OFF ;
     bfe:	ef e4       	ldi	r30, 0x4F	; 79
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	10 82       	st	Z, r1
	ISR_ptr=NULL_PTR ;
     c04:	10 92 f7 00 	sts	0x00F7, r1
     c08:	10 92 f6 00 	sts	0x00F6, r1
	TIFR|=(1<<TOV1);
     c0c:	a8 e5       	ldi	r26, 0x58	; 88
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e8 e5       	ldi	r30, 0x58	; 88
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	8c 93       	st	X, r24
}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void)){
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <Timer1_setCallBack+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	ISR_ptr=a_ptr ;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	90 93 f7 00 	sts	0x00F7, r25
     c36:	80 93 f6 00 	sts	0x00F6, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <__vector_7>:

ISR(TIMER1_COMPA_vect){
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	if(ISR_ptr!=NULL_PTR){
     c6e:	80 91 f6 00 	lds	r24, 0x00F6
     c72:	90 91 f7 00 	lds	r25, 0x00F7
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	29 f0       	breq	.+10     	; 0xc84 <__vector_7+0x40>
		(*ISR_ptr)();
     c7a:	e0 91 f6 00 	lds	r30, 0x00F6
     c7e:	f0 91 f7 00 	lds	r31, 0x00F7
     c82:	09 95       	icall
	}
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_9>:
ISR(TIMER1_OVF_vect){
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	if(ISR_ptr!=NULL_PTR){
     cd4:	80 91 f6 00 	lds	r24, 0x00F6
     cd8:	90 91 f7 00 	lds	r25, 0x00F7
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	29 f0       	breq	.+10     	; 0xcea <__vector_9+0x40>
		(*ISR_ptr)();
     ce0:	e0 91 f6 00 	lds	r30, 0x00F6
     ce4:	f0 91 f7 00 	lds	r31, 0x00F7
     ce8:	09 95       	icall
	}
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <GPIO_setupPinDirection+0x6>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <GPIO_setupPinDirection+0x8>
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	6a 83       	std	Y+2, r22	; 0x02
     d22:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	88 30       	cpi	r24, 0x08	; 8
     d28:	08 f0       	brcs	.+2      	; 0xd2c <GPIO_setupPinDirection+0x1c>
     d2a:	d5 c0       	rjmp	.+426    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	08 f0       	brcs	.+2      	; 0xd34 <GPIO_setupPinDirection+0x24>
     d32:	d1 c0       	rjmp	.+418    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	3d 83       	std	Y+5, r19	; 0x05
     d3c:	2c 83       	std	Y+4, r18	; 0x04
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	9d 81       	ldd	r25, Y+5	; 0x05
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <GPIO_setupPinDirection+0x3a>
     d48:	43 c0       	rjmp	.+134    	; 0xdd0 <GPIO_setupPinDirection+0xc0>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	2c f4       	brge	.+10     	; 0xd5e <GPIO_setupPinDirection+0x4e>
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	71 f0       	breq	.+28     	; 0xd78 <GPIO_setupPinDirection+0x68>
     d5c:	bc c0       	rjmp	.+376    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
     d5e:	2c 81       	ldd	r18, Y+4	; 0x04
     d60:	3d 81       	ldd	r19, Y+5	; 0x05
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <GPIO_setupPinDirection+0x5a>
     d68:	5f c0       	rjmp	.+190    	; 0xe28 <GPIO_setupPinDirection+0x118>
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	91 05       	cpc	r25, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_setupPinDirection+0x66>
     d74:	85 c0       	rjmp	.+266    	; 0xe80 <GPIO_setupPinDirection+0x170>
     d76:	af c0       	rjmp	.+350    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	a1 f4       	brne	.+40     	; 0xda6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d7e:	aa e3       	ldi	r26, 0x3A	; 58
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ea e3       	ldi	r30, 0x3A	; 58
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_setupPinDirection+0x8c>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_setupPinDirection+0x88>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	98 c0       	rjmp	.+304    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <GPIO_setupPinDirection+0xb4>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <GPIO_setupPinDirection+0xb0>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	83 c0       	rjmp	.+262    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dd6:	a7 e3       	ldi	r26, 0x37	; 55
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e3       	ldi	r30, 0x37	; 55
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_setupPinDirection+0xe4>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_setupPinDirection+0xe0>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	6c c0       	rjmp	.+216    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dfe:	a7 e3       	ldi	r26, 0x37	; 55
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <GPIO_setupPinDirection+0x10c>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <GPIO_setupPinDirection+0x108>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	57 c0       	rjmp	.+174    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	a1 f4       	brne	.+40     	; 0xe56 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <GPIO_setupPinDirection+0x13c>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <GPIO_setupPinDirection+0x138>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	40 c0       	rjmp	.+128    	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e56:	a4 e3       	ldi	r26, 0x34	; 52
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e3       	ldi	r30, 0x34	; 52
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <GPIO_setupPinDirection+0x164>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <GPIO_setupPinDirection+0x160>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	2b c0       	rjmp	.+86     	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	a1 f4       	brne	.+40     	; 0xeae <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <GPIO_setupPinDirection+0x194>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <GPIO_setupPinDirection+0x190>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	14 c0       	rjmp	.+40     	; 0xed6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     eae:	a1 e3       	ldi	r26, 0x31	; 49
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e1 e3       	ldi	r30, 0x31	; 49
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <GPIO_setupPinDirection+0x1bc>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <GPIO_setupPinDirection+0x1b8>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <GPIO_writePin+0x6>
     eec:	00 d0       	rcall	.+0      	; 0xeee <GPIO_writePin+0x8>
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
     ef8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 30       	cpi	r24, 0x08	; 8
     efe:	08 f0       	brcs	.+2      	; 0xf02 <GPIO_writePin+0x1c>
     f00:	d5 c0       	rjmp	.+426    	; 0x10ac <GPIO_writePin+0x1c6>
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	08 f0       	brcs	.+2      	; 0xf0a <GPIO_writePin+0x24>
     f08:	d1 c0       	rjmp	.+418    	; 0x10ac <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3d 83       	std	Y+5, r19	; 0x05
     f12:	2c 83       	std	Y+4, r18	; 0x04
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <GPIO_writePin+0x3a>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <GPIO_writePin+0xc0>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <GPIO_writePin+0x4e>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	71 f0       	breq	.+28     	; 0xf4e <GPIO_writePin+0x68>
     f32:	bc c0       	rjmp	.+376    	; 0x10ac <GPIO_writePin+0x1c6>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <GPIO_writePin+0x5a>
     f3e:	5f c0       	rjmp	.+190    	; 0xffe <GPIO_writePin+0x118>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <GPIO_writePin+0x66>
     f4a:	85 c0       	rjmp	.+266    	; 0x1056 <GPIO_writePin+0x170>
     f4c:	af c0       	rjmp	.+350    	; 0x10ac <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	a1 f4       	brne	.+40     	; 0xf7c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_writePin+0x8c>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_writePin+0x88>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	98 c0       	rjmp	.+304    	; 0x10ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f7c:	ab e3       	ldi	r26, 0x3B	; 59
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	eb e3       	ldi	r30, 0x3B	; 59
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_writePin+0xb4>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_writePin+0xb0>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	83 c0       	rjmp	.+262    	; 0x10ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	a1 f4       	brne	.+40     	; 0xfd4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_writePin+0xe4>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_writePin+0xe0>
     fce:	84 2b       	or	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	6c c0       	rjmp	.+216    	; 0x10ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_writePin+0x10c>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_writePin+0x108>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	57 c0       	rjmp	.+174    	; 0x10ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	a1 f4       	brne	.+40     	; 0x102c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_writePin+0x13c>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_writePin+0x138>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	40 c0       	rjmp	.+128    	; 0x10ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    102c:	a5 e3       	ldi	r26, 0x35	; 53
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e3       	ldi	r30, 0x35	; 53
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_writePin+0x164>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_writePin+0x160>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	2b c0       	rjmp	.+86     	; 0x10ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	a1 f4       	brne	.+40     	; 0x1084 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_writePin+0x194>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_writePin+0x190>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_writePin+0x1bc>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_writePin+0x1b8>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_readPin+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <GPIO_readPin+0x8>
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10ce:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 30       	cpi	r24, 0x08	; 8
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <GPIO_readPin+0x1c>
    10d6:	84 c0       	rjmp	.+264    	; 0x11e0 <GPIO_readPin+0x124>
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <GPIO_readPin+0x24>
    10de:	80 c0       	rjmp	.+256    	; 0x11e0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3d 83       	std	Y+5, r19	; 0x05
    10e8:	2c 83       	std	Y+4, r18	; 0x04
    10ea:	4c 81       	ldd	r20, Y+4	; 0x04
    10ec:	5d 81       	ldd	r21, Y+5	; 0x05
    10ee:	41 30       	cpi	r20, 0x01	; 1
    10f0:	51 05       	cpc	r21, r1
    10f2:	79 f1       	breq	.+94     	; 0x1152 <GPIO_readPin+0x96>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	91 05       	cpc	r25, r1
    10fc:	34 f4       	brge	.+12     	; 0x110a <GPIO_readPin+0x4e>
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	21 15       	cp	r18, r1
    1104:	31 05       	cpc	r19, r1
    1106:	69 f0       	breq	.+26     	; 0x1122 <GPIO_readPin+0x66>
    1108:	6b c0       	rjmp	.+214    	; 0x11e0 <GPIO_readPin+0x124>
    110a:	4c 81       	ldd	r20, Y+4	; 0x04
    110c:	5d 81       	ldd	r21, Y+5	; 0x05
    110e:	42 30       	cpi	r20, 0x02	; 2
    1110:	51 05       	cpc	r21, r1
    1112:	b9 f1       	breq	.+110    	; 0x1182 <GPIO_readPin+0xc6>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <GPIO_readPin+0x64>
    111e:	49 c0       	rjmp	.+146    	; 0x11b2 <GPIO_readPin+0xf6>
    1120:	5f c0       	rjmp	.+190    	; 0x11e0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1122:	e9 e3       	ldi	r30, 0x39	; 57
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_readPin+0x7e>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_readPin+0x7a>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	88 23       	and	r24, r24
    1146:	19 f0       	breq	.+6      	; 0x114e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	49 c0       	rjmp	.+146    	; 0x11e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	47 c0       	rjmp	.+142    	; 0x11e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1152:	e6 e3       	ldi	r30, 0x36	; 54
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <GPIO_readPin+0xae>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <GPIO_readPin+0xaa>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	90 70       	andi	r25, 0x00	; 0
    1174:	88 23       	and	r24, r24
    1176:	19 f0       	breq	.+6      	; 0x117e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	31 c0       	rjmp	.+98     	; 0x11e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	2f c0       	rjmp	.+94     	; 0x11e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1182:	e3 e3       	ldi	r30, 0x33	; 51
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_readPin+0xde>
    1196:	55 95       	asr	r21
    1198:	47 95       	ror	r20
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_readPin+0xda>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	19 c0       	rjmp	.+50     	; 0x11e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	17 c0       	rjmp	.+46     	; 0x11e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11b2:	e0 e3       	ldi	r30, 0x30	; 48
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_readPin+0x10e>
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_readPin+0x10a>
    11ce:	ca 01       	movw	r24, r20
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 23       	and	r24, r24
    11d6:	19 f0       	breq	.+6      	; 0x11de <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11de:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <GPIO_setupPortDirection+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <GPIO_setupPortDirection+0x8>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	90 f5       	brcc	.+100    	; 0x126c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	d1 f0       	breq	.+52     	; 0x1250 <GPIO_setupPortDirection+0x5e>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <GPIO_setupPortDirection+0x3e>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	61 f0       	breq	.+24     	; 0x1246 <GPIO_setupPortDirection+0x54>
    122e:	1e c0       	rjmp	.+60     	; 0x126c <GPIO_setupPortDirection+0x7a>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	81 f0       	breq	.+32     	; 0x125a <GPIO_setupPortDirection+0x68>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <GPIO_setupPortDirection+0x72>
    1244:	13 c0       	rjmp	.+38     	; 0x126c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1250:	e7 e3       	ldi	r30, 0x37	; 55
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	09 c0       	rjmp	.+18     	; 0x126c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	04 c0       	rjmp	.+8      	; 0x126c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1264:	e1 e3       	ldi	r30, 0x31	; 49
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
			break;
		}
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_writePort+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_writePort+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	90 f5       	brcc	.+100    	; 0x12f4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3c 83       	std	Y+4, r19	; 0x04
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	d1 f0       	breq	.+52     	; 0x12d8 <GPIO_writePort+0x5e>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <GPIO_writePort+0x3e>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <GPIO_writePort+0x54>
    12b6:	1e c0       	rjmp	.+60     	; 0x12f4 <GPIO_writePort+0x7a>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <GPIO_writePort+0x68>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <GPIO_writePort+0x72>
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12d8:	e8 e3       	ldi	r30, 0x38	; 56
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12ec:	e2 e3       	ldi	r30, 0x32	; 50
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <GPIO_readPort+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <GPIO_readPort+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1310:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	90 f5       	brcc	.+100    	; 0x137c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <GPIO_readPort+0x5e>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <GPIO_readPort+0x3e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <GPIO_readPort+0x54>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <GPIO_readPort+0x7a>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <GPIO_readPort+0x68>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <GPIO_readPort+0x72>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1356:	e9 e3       	ldi	r30, 0x39	; 57
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	0e c0       	rjmp	.+28     	; 0x137c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1360:	e6 e3       	ldi	r30, 0x36	; 54
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	09 c0       	rjmp	.+18     	; 0x137c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    136a:	e3 e3       	ldi	r30, 0x33	; 51
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	04 c0       	rjmp	.+8      	; 0x137c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1374:	e0 e3       	ldi	r30, 0x30	; 48
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	6e 97       	sbiw	r28, 0x1e	; 30
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	66 e0       	ldi	r22, 0x06	; 6
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	67 e0       	ldi	r22, 0x07	; 7
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13e6:	83 e0       	ldi	r24, 0x03	; 3
    13e8:	65 e0       	ldi	r22, 0x05	; 5
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13f0:	1d 8e       	std	Y+29, r1	; 0x1d
    13f2:	31 c1       	rjmp	.+610    	; 0x1656 <KEYPAD_getPressedKey+0x2ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f6:	98 2f       	mov	r25, r24
    13f8:	9c 5f       	subi	r25, 0xFC	; 252
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	69 2f       	mov	r22, r25
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1406:	98 2f       	mov	r25, r24
    1408:	9c 5f       	subi	r25, 0xFC	; 252
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	69 2f       	mov	r22, r25
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1414:	1e 8e       	std	Y+30, r1	; 0x1e
    1416:	9e c0       	rjmp	.+316    	; 0x1554 <KEYPAD_getPressedKey+0x1c8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141a:	98 2f       	mov	r25, r24
    141c:	9e 5f       	subi	r25, 0xFE	; 254
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	69 2f       	mov	r22, r25
    1422:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GPIO_readPin>
    1426:	88 23       	and	r24, r24
    1428:	09 f0       	breq	.+2      	; 0x142c <KEYPAD_getPressedKey+0xa0>
    142a:	91 c0       	rjmp	.+290    	; 0x154e <KEYPAD_getPressedKey+0x1c2>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 ef       	ldi	r26, 0xF0	; 240
    1432:	b1 e4       	ldi	r27, 0x41	; 65
    1434:	89 8f       	std	Y+25, r24	; 0x19
    1436:	9a 8f       	std	Y+26, r25	; 0x1a
    1438:	ab 8f       	std	Y+27, r26	; 0x1b
    143a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143c:	69 8d       	ldd	r22, Y+25	; 0x19
    143e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a ef       	ldi	r20, 0xFA	; 250
    144a:	54 e4       	ldi	r21, 0x44	; 68
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8d 8b       	std	Y+21, r24	; 0x15
    1456:	9e 8b       	std	Y+22, r25	; 0x16
    1458:	af 8b       	std	Y+23, r26	; 0x17
    145a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1470:	88 23       	and	r24, r24
    1472:	2c f4       	brge	.+10     	; 0x147e <KEYPAD_getPressedKey+0xf2>
		__ticks = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9c 8b       	std	Y+20, r25	; 0x14
    147a:	8b 8b       	std	Y+19, r24	; 0x13
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <KEYPAD_getPressedKey+0x170>
	else if (__tmp > 65535)
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	3f ef       	ldi	r19, 0xFF	; 255
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	57 e4       	ldi	r21, 0x47	; 71
    148e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1492:	18 16       	cp	r1, r24
    1494:	4c f5       	brge	.+82     	; 0x14e8 <KEYPAD_getPressedKey+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	69 8d       	ldd	r22, Y+25	; 0x19
    1498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    149c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	51 e4       	ldi	r21, 0x41	; 65
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9c 8b       	std	Y+20, r25	; 0x14
    14bc:	8b 8b       	std	Y+19, r24	; 0x13
    14be:	0f c0       	rjmp	.+30     	; 0x14de <KEYPAD_getPressedKey+0x152>
    14c0:	88 ec       	ldi	r24, 0xC8	; 200
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9a 8b       	std	Y+18, r25	; 0x12
    14c6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c8:	89 89       	ldd	r24, Y+17	; 0x11
    14ca:	9a 89       	ldd	r25, Y+18	; 0x12
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <KEYPAD_getPressedKey+0x140>
    14d0:	9a 8b       	std	Y+18, r25	; 0x12
    14d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	9c 8b       	std	Y+20, r25	; 0x14
    14dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	8b 89       	ldd	r24, Y+19	; 0x13
    14e0:	9c 89       	ldd	r25, Y+20	; 0x14
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <KEYPAD_getPressedKey+0x134>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <KEYPAD_getPressedKey+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ea:	7e 89       	ldd	r23, Y+22	; 0x16
    14ec:	8f 89       	ldd	r24, Y+23	; 0x17
    14ee:	98 8d       	ldd	r25, Y+24	; 0x18
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9c 8b       	std	Y+20, r25	; 0x14
    14fa:	8b 8b       	std	Y+19, r24	; 0x13
    14fc:	8b 89       	ldd	r24, Y+19	; 0x13
    14fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1500:	98 8b       	std	Y+16, r25	; 0x10
    1502:	8f 87       	std	Y+15, r24	; 0x0f
    1504:	8f 85       	ldd	r24, Y+15	; 0x0f
    1506:	98 89       	ldd	r25, Y+16	; 0x10
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <KEYPAD_getPressedKey+0x17c>
    150c:	98 8b       	std	Y+16, r25	; 0x10
    150e:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30);
					if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1510:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1512:	98 2f       	mov	r25, r24
    1514:	9e 5f       	subi	r25, 0xFE	; 254
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	69 2f       	mov	r22, r25
    151a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GPIO_readPin>
    151e:	88 23       	and	r24, r24
    1520:	b1 f4       	brne	.+44     	; 0x154e <KEYPAD_getPressedKey+0x1c2>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
#else
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	98 2f       	mov	r25, r24
    1532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1534:	89 0f       	add	r24, r25
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	0e 94 30 0b 	call	0x1660	; 0x1660 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);

			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    153c:	6e 96       	adiw	r28, 0x1e	; 30
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    154e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	8e 8f       	std	Y+30, r24	; 0x1e
    1554:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1556:	84 30       	cpi	r24, 0x04	; 4
    1558:	08 f4       	brcc	.+2      	; 0x155c <KEYPAD_getPressedKey+0x1d0>
    155a:	5e cf       	rjmp	.-324    	; 0x1418 <KEYPAD_getPressedKey+0x8c>
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
					}}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    155c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155e:	98 2f       	mov	r25, r24
    1560:	9c 5f       	subi	r25, 0xFC	; 252
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	69 2f       	mov	r22, r25
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e2       	ldi	r26, 0x20	; 32
    1572:	b1 e4       	ldi	r27, 0x41	; 65
    1574:	8b 87       	std	Y+11, r24	; 0x0b
    1576:	9c 87       	std	Y+12, r25	; 0x0c
    1578:	ad 87       	std	Y+13, r26	; 0x0d
    157a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6b 85       	ldd	r22, Y+11	; 0x0b
    157e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1580:	8d 85       	ldd	r24, Y+13	; 0x0d
    1582:	9e 85       	ldd	r25, Y+14	; 0x0e
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	98 87       	std	Y+8, r25	; 0x08
    1598:	a9 87       	std	Y+9, r26	; 0x09
    159a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <KEYPAD_getPressedKey+0x232>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <KEYPAD_getPressedKey+0x2b0>
	else if (__tmp > 65535)
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <KEYPAD_getPressedKey+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <KEYPAD_getPressedKey+0x292>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <KEYPAD_getPressedKey+0x280>
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <KEYPAD_getPressedKey+0x274>
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <KEYPAD_getPressedKey+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <KEYPAD_getPressedKey+0x2bc>
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	8d 8f       	std	Y+29, r24	; 0x1d
    1656:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	08 f4       	brcc	.+2      	; 0x165e <KEYPAD_getPressedKey+0x2d2>
    165c:	cb ce       	rjmp	.-618    	; 0x13f4 <KEYPAD_getPressedKey+0x68>
    165e:	c8 ce       	rjmp	.-624    	; 0x13f0 <KEYPAD_getPressedKey+0x64>

00001660 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    166e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3c 83       	std	Y+4, r19	; 0x04
    1678:	2b 83       	std	Y+3, r18	; 0x03
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	88 30       	cpi	r24, 0x08	; 8
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1684:	70 c0       	rjmp	.+224    	; 0x1766 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	29 30       	cpi	r18, 0x09	; 9
    168c:	31 05       	cpc	r19, r1
    168e:	5c f5       	brge	.+86     	; 0x16e6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    169a:	59 c0       	rjmp	.+178    	; 0x174e <KEYPAD_4x4_adjustKeyNumber+0xee>
    169c:	2b 81       	ldd	r18, Y+3	; 0x03
    169e:	3c 81       	ldd	r19, Y+4	; 0x04
    16a0:	25 30       	cpi	r18, 0x05	; 5
    16a2:	31 05       	cpc	r19, r1
    16a4:	9c f4       	brge	.+38     	; 0x16cc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    16b0:	48 c0       	rjmp	.+144    	; 0x1742 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	23 30       	cpi	r18, 0x03	; 3
    16b8:	31 05       	cpc	r19, r1
    16ba:	0c f0       	brlt	.+2      	; 0x16be <KEYPAD_4x4_adjustKeyNumber+0x5e>
    16bc:	45 c0       	rjmp	.+138    	; 0x1748 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <KEYPAD_4x4_adjustKeyNumber+0x6a>
    16c8:	39 c0       	rjmp	.+114    	; 0x173c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    16ca:	67 c0       	rjmp	.+206    	; 0x179a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    16cc:	2b 81       	ldd	r18, Y+3	; 0x03
    16ce:	3c 81       	ldd	r19, Y+4	; 0x04
    16d0:	26 30       	cpi	r18, 0x06	; 6
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    16d6:	41 c0       	rjmp	.+130    	; 0x175a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	87 30       	cpi	r24, 0x07	; 7
    16de:	91 05       	cpc	r25, r1
    16e0:	0c f0       	brlt	.+2      	; 0x16e4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    16e2:	3e c0       	rjmp	.+124    	; 0x1760 <KEYPAD_4x4_adjustKeyNumber+0x100>
    16e4:	37 c0       	rjmp	.+110    	; 0x1754 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	2c 30       	cpi	r18, 0x0C	; 12
    16ec:	31 05       	cpc	r19, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    16f0:	46 c0       	rjmp	.+140    	; 0x177e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	8d 30       	cpi	r24, 0x0D	; 13
    16f8:	91 05       	cpc	r25, r1
    16fa:	5c f4       	brge	.+22     	; 0x1712 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	2a 30       	cpi	r18, 0x0A	; 10
    1702:	31 05       	cpc	r19, r1
    1704:	b1 f1       	breq	.+108    	; 0x1772 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	8b 30       	cpi	r24, 0x0B	; 11
    170c:	91 05       	cpc	r25, r1
    170e:	a4 f5       	brge	.+104    	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1710:	2d c0       	rjmp	.+90     	; 0x176c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1712:	2b 81       	ldd	r18, Y+3	; 0x03
    1714:	3c 81       	ldd	r19, Y+4	; 0x04
    1716:	2e 30       	cpi	r18, 0x0E	; 14
    1718:	31 05       	cpc	r19, r1
    171a:	b9 f1       	breq	.+110    	; 0x178a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	8e 30       	cpi	r24, 0x0E	; 14
    1722:	91 05       	cpc	r25, r1
    1724:	7c f1       	brlt	.+94     	; 0x1784 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	2f 30       	cpi	r18, 0x0F	; 15
    172c:	31 05       	cpc	r19, r1
    172e:	79 f1       	breq	.+94     	; 0x178e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	80 31       	cpi	r24, 0x10	; 16
    1736:	91 05       	cpc	r25, r1
    1738:	69 f1       	breq	.+90     	; 0x1794 <KEYPAD_4x4_adjustKeyNumber+0x134>
    173a:	2f c0       	rjmp	.+94     	; 0x179a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    173c:	87 e0       	ldi	r24, 0x07	; 7
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	2e c0       	rjmp	.+92     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    1742:	88 e0       	ldi	r24, 0x08	; 8
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	2b c0       	rjmp	.+86     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    1748:	89 e0       	ldi	r24, 0x09	; 9
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	28 c0       	rjmp	.+80     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    174e:	85 e2       	ldi	r24, 0x25	; 37
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	25 c0       	rjmp	.+74     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    1754:	84 e0       	ldi	r24, 0x04	; 4
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	22 c0       	rjmp	.+68     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    175a:	85 e0       	ldi	r24, 0x05	; 5
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	1f c0       	rjmp	.+62     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    1760:	86 e0       	ldi	r24, 0x06	; 6
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	1c c0       	rjmp	.+56     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1766:	8a e2       	ldi	r24, 0x2A	; 42
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	19 c0       	rjmp	.+50     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	16 c0       	rjmp	.+44     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	13 c0       	rjmp	.+38     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	10 c0       	rjmp	.+32     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    177e:	8d e2       	ldi	r24, 0x2D	; 45
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	0d c0       	rjmp	.+26     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    1784:	8d e0       	ldi	r24, 0x0D	; 13
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	0a c0       	rjmp	.+20     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	08 c0       	rjmp	.+16     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    178e:	8d e3       	ldi	r24, 0x3D	; 61
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	05 c0       	rjmp	.+10     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1794:	8b e2       	ldi	r24, 0x2B	; 43
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	02 c0       	rjmp	.+4      	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	2e 97       	sbiw	r28, 0x0e	; 14
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 88 06 	call	0xd10	; 0xd10 <GPIO_setupPinDirection>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 ea       	ldi	r26, 0xA0	; 160
    17dc:	b1 e4       	ldi	r27, 0x41	; 65
    17de:	8b 87       	std	Y+11, r24	; 0x0b
    17e0:	9c 87       	std	Y+12, r25	; 0x0c
    17e2:	ad 87       	std	Y+13, r26	; 0x0d
    17e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	98 87       	std	Y+8, r25	; 0x08
    1802:	a9 87       	std	Y+9, r26	; 0x09
    1804:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <LCD_init+0x7a>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6b 85       	ldd	r22, Y+11	; 0x0b
    1842:	7c 85       	ldd	r23, Y+12	; 0x0c
    1844:	8d 85       	ldd	r24, Y+13	; 0x0d
    1846:	9e 85       	ldd	r25, Y+14	; 0x0e
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <LCD_init+0xda>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_init+0xc8>
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <LCD_init+0xbc>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_init+0x104>
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	6f ef       	ldi	r22, 0xFF	; 255
    18be:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    18c2:	88 e3       	ldi	r24, 0x38	; 56
    18c4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18c8:	8c e0       	ldi	r24, 0x0C	; 12
    18ca:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    18d4:	2e 96       	adiw	r28, 0x0e	; 14
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	e9 97       	sbiw	r28, 0x39	; 57
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e8       	ldi	r26, 0x80	; 128
    190c:	bf e3       	ldi	r27, 0x3F	; 63
    190e:	8d ab       	std	Y+53, r24	; 0x35
    1910:	9e ab       	std	Y+54, r25	; 0x36
    1912:	af ab       	std	Y+55, r26	; 0x37
    1914:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6d a9       	ldd	r22, Y+53	; 0x35
    1918:	7e a9       	ldd	r23, Y+54	; 0x36
    191a:	8f a9       	ldd	r24, Y+55	; 0x37
    191c:	98 ad       	ldd	r25, Y+56	; 0x38
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a ef       	ldi	r20, 0xFA	; 250
    1924:	54 e4       	ldi	r21, 0x44	; 68
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	89 ab       	std	Y+49, r24	; 0x31
    1930:	9a ab       	std	Y+50, r25	; 0x32
    1932:	ab ab       	std	Y+51, r26	; 0x33
    1934:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1936:	69 a9       	ldd	r22, Y+49	; 0x31
    1938:	7a a9       	ldd	r23, Y+50	; 0x32
    193a:	8b a9       	ldd	r24, Y+51	; 0x33
    193c:	9c a9       	ldd	r25, Y+52	; 0x34
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <LCD_sendCommand+0x72>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	98 ab       	std	Y+48, r25	; 0x30
    1954:	8f a7       	std	Y+47, r24	; 0x2f
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1958:	69 a9       	ldd	r22, Y+49	; 0x31
    195a:	7a a9       	ldd	r23, Y+50	; 0x32
    195c:	8b a9       	ldd	r24, Y+51	; 0x33
    195e:	9c a9       	ldd	r25, Y+52	; 0x34
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6d a9       	ldd	r22, Y+53	; 0x35
    1972:	7e a9       	ldd	r23, Y+54	; 0x36
    1974:	8f a9       	ldd	r24, Y+55	; 0x37
    1976:	98 ad       	ldd	r25, Y+56	; 0x38
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	98 ab       	std	Y+48, r25	; 0x30
    1996:	8f a7       	std	Y+47, r24	; 0x2f
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_sendCommand+0xd2>
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9e a7       	std	Y+46, r25	; 0x2e
    19a0:	8d a7       	std	Y+45, r24	; 0x2d
    19a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_sendCommand+0xc0>
    19aa:	9e a7       	std	Y+46, r25	; 0x2e
    19ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b0:	98 a9       	ldd	r25, Y+48	; 0x30
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	98 ab       	std	Y+48, r25	; 0x30
    19b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ba:	98 a9       	ldd	r25, Y+48	; 0x30
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_sendCommand+0xb4>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	98 ab       	std	Y+48, r25	; 0x30
    19d4:	8f a7       	std	Y+47, r24	; 0x2f
    19d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d8:	98 a9       	ldd	r25, Y+48	; 0x30
    19da:	9c a7       	std	Y+44, r25	; 0x2c
    19dc:	8b a7       	std	Y+43, r24	; 0x2b
    19de:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_sendCommand+0xfc>
    19e6:	9c a7       	std	Y+44, r25	; 0x2c
    19e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a0 e8       	ldi	r26, 0x80	; 128
    19fa:	bf e3       	ldi	r27, 0x3F	; 63
    19fc:	8f a3       	std	Y+39, r24	; 0x27
    19fe:	98 a7       	std	Y+40, r25	; 0x28
    1a00:	a9 a7       	std	Y+41, r26	; 0x29
    1a02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	6f a1       	ldd	r22, Y+39	; 0x27
    1a06:	78 a5       	ldd	r23, Y+40	; 0x28
    1a08:	89 a5       	ldd	r24, Y+41	; 0x29
    1a0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a ef       	ldi	r20, 0xFA	; 250
    1a12:	54 e4       	ldi	r21, 0x44	; 68
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8b a3       	std	Y+35, r24	; 0x23
    1a1e:	9c a3       	std	Y+36, r25	; 0x24
    1a20:	ad a3       	std	Y+37, r26	; 0x25
    1a22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a24:	6b a1       	ldd	r22, Y+35	; 0x23
    1a26:	7c a1       	ldd	r23, Y+36	; 0x24
    1a28:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <LCD_sendCommand+0x160>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9a a3       	std	Y+34, r25	; 0x22
    1a42:	89 a3       	std	Y+33, r24	; 0x21
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1a46:	6b a1       	ldd	r22, Y+35	; 0x23
    1a48:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a60:	78 a5       	ldd	r23, Y+40	; 0x28
    1a62:	89 a5       	ldd	r24, Y+41	; 0x29
    1a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e2       	ldi	r20, 0x20	; 32
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9a a3       	std	Y+34, r25	; 0x22
    1a84:	89 a3       	std	Y+33, r24	; 0x21
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <LCD_sendCommand+0x1c0>
    1a88:	88 ec       	ldi	r24, 0xC8	; 200
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	98 a3       	std	Y+32, r25	; 0x20
    1a8e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a92:	98 a1       	ldd	r25, Y+32	; 0x20
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_sendCommand+0x1ae>
    1a98:	98 a3       	std	Y+32, r25	; 0x20
    1a9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9a a3       	std	Y+34, r25	; 0x22
    1aa4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <LCD_sendCommand+0x1a2>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aca:	8d 8f       	std	Y+29, r24	; 0x1d
    1acc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ace:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_sendCommand+0x1ea>
    1ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	69 ad       	ldd	r22, Y+57	; 0x39
    1adc:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePort>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e8       	ldi	r26, 0x80	; 128
    1ae6:	bf e3       	ldi	r27, 0x3F	; 63
    1ae8:	89 8f       	std	Y+25, r24	; 0x19
    1aea:	9a 8f       	std	Y+26, r25	; 0x1a
    1aec:	ab 8f       	std	Y+27, r26	; 0x1b
    1aee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a ef       	ldi	r20, 0xFA	; 250
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8d 8b       	std	Y+21, r24	; 0x15
    1b0a:	9e 8b       	std	Y+22, r25	; 0x16
    1b0c:	af 8b       	std	Y+23, r26	; 0x17
    1b0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b10:	6d 89       	ldd	r22, Y+21	; 0x15
    1b12:	7e 89       	ldd	r23, Y+22	; 0x16
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9c 8b       	std	Y+20, r25	; 0x14
    1b70:	8b 8b       	std	Y+19, r24	; 0x13
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <LCD_sendCommand+0x2ac>
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9a 8b       	std	Y+18, r25	; 0x12
    1b7a:	89 8b       	std	Y+17, r24	; 0x11
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_sendCommand+0x29a>
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <LCD_sendCommand+0x28e>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	98 8b       	std	Y+16, r25	; 0x10
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	98 89       	ldd	r25, Y+16	; 0x10
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_sendCommand+0x2d6>
    1bc0:	98 8b       	std	Y+16, r25	; 0x10
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a0 e8       	ldi	r26, 0x80	; 128
    1bd4:	bf e3       	ldi	r27, 0x3F	; 63
    1bd6:	8b 87       	std	Y+11, r24	; 0x0b
    1bd8:	9c 87       	std	Y+12, r25	; 0x0c
    1bda:	ad 87       	std	Y+13, r26	; 0x0d
    1bdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
    1bf8:	98 87       	std	Y+8, r25	; 0x08
    1bfa:	a9 87       	std	Y+9, r26	; 0x09
    1bfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	4c f5       	brge	.+82     	; 0x1c8a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <LCD_sendCommand+0x39a>
    1c62:	88 ec       	ldi	r24, 0xC8	; 200
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_sendCommand+0x388>
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <LCD_sendCommand+0x37c>
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0x3c4>
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cb2:	e9 96       	adiw	r28, 0x39	; 57
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	e9 97       	sbiw	r28, 0x39	; 57
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	8d ab       	std	Y+53, r24	; 0x35
    1cee:	9e ab       	std	Y+54, r25	; 0x36
    1cf0:	af ab       	std	Y+55, r26	; 0x37
    1cf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfa:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	89 ab       	std	Y+49, r24	; 0x31
    1d0e:	9a ab       	std	Y+50, r25	; 0x32
    1d10:	ab ab       	std	Y+51, r26	; 0x33
    1d12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d14:	69 a9       	ldd	r22, Y+49	; 0x31
    1d16:	7a a9       	ldd	r23, Y+50	; 0x32
    1d18:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 ab       	std	Y+48, r25	; 0x30
    1d32:	8f a7       	std	Y+47, r24	; 0x2f
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1d36:	69 a9       	ldd	r22, Y+49	; 0x31
    1d38:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_displayCharacter+0xd2>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e a7       	std	Y+46, r25	; 0x2e
    1d7e:	8d a7       	std	Y+45, r24	; 0x2d
    1d80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_displayCharacter+0xc0>
    1d88:	9e a7       	std	Y+46, r25	; 0x2e
    1d8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	98 ab       	std	Y+48, r25	; 0x30
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_displayCharacter+0xb4>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	98 ab       	std	Y+48, r25	; 0x30
    1db2:	8f a7       	std	Y+47, r24	; 0x2f
    1db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db6:	98 a9       	ldd	r25, Y+48	; 0x30
    1db8:	9c a7       	std	Y+44, r25	; 0x2c
    1dba:	8b a7       	std	Y+43, r24	; 0x2b
    1dbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_displayCharacter+0xfc>
    1dc4:	9c a7       	std	Y+44, r25	; 0x2c
    1dc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	8f a3       	std	Y+39, r24	; 0x27
    1ddc:	98 a7       	std	Y+40, r25	; 0x28
    1dde:	a9 a7       	std	Y+41, r26	; 0x29
    1de0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8b a3       	std	Y+35, r24	; 0x23
    1dfc:	9c a3       	std	Y+36, r25	; 0x24
    1dfe:	ad a3       	std	Y+37, r26	; 0x25
    1e00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e02:	6b a1       	ldd	r22, Y+35	; 0x23
    1e04:	7c a1       	ldd	r23, Y+36	; 0x24
    1e06:	8d a1       	ldd	r24, Y+37	; 0x25
    1e08:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1e24:	6b a1       	ldd	r22, Y+35	; 0x23
    1e26:	7c a1       	ldd	r23, Y+36	; 0x24
    1e28:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e40:	89 a5       	ldd	r24, Y+41	; 0x29
    1e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_displayCharacter+0x1c0>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	98 a3       	std	Y+32, r25	; 0x20
    1e6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e70:	98 a1       	ldd	r25, Y+32	; 0x20
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_displayCharacter+0x1ae>
    1e76:	98 a3       	std	Y+32, r25	; 0x20
    1e78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9a a3       	std	Y+34, r25	; 0x22
    1e82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	89 a1       	ldd	r24, Y+33	; 0x21
    1e86:	9a a1       	ldd	r25, Y+34	; 0x22
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_displayCharacter+0x1a2>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e90:	7c a1       	ldd	r23, Y+36	; 0x24
    1e92:	8d a1       	ldd	r24, Y+37	; 0x25
    1e94:	9e a1       	ldd	r25, Y+38	; 0x26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_displayCharacter+0x1ea>
    1eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	69 ad       	ldd	r22, Y+57	; 0x39
    1eba:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePort>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	89 8f       	std	Y+25, r24	; 0x19
    1ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eca:	ab 8f       	std	Y+27, r26	; 0x1b
    1ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8d 8b       	std	Y+21, r24	; 0x15
    1ee8:	9e 8b       	std	Y+22, r25	; 0x16
    1eea:	af 8b       	std	Y+23, r26	; 0x17
    1eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1f10:	6d 89       	ldd	r22, Y+21	; 0x15
    1f12:	7e 89       	ldd	r23, Y+22	; 0x16
    1f14:	8f 89       	ldd	r24, Y+23	; 0x17
    1f16:	98 8d       	ldd	r25, Y+24	; 0x18
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_displayCharacter+0x2ac>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9a 8b       	std	Y+18, r25	; 0x12
    1f58:	89 8b       	std	Y+17, r24	; 0x11
    1f5a:	89 89       	ldd	r24, Y+17	; 0x11
    1f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_displayCharacter+0x29a>
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_displayCharacter+0x28e>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	98 8b       	std	Y+16, r25	; 0x10
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
    1f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f98:	98 89       	ldd	r25, Y+16	; 0x10
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_displayCharacter+0x2d6>
    1f9e:	98 8b       	std	Y+16, r25	; 0x10
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
    1fb6:	9c 87       	std	Y+12, r25	; 0x0c
    1fb8:	ad 87       	std	Y+13, r26	; 0x0d
    1fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8f 83       	std	Y+7, r24	; 0x07
    1fd6:	98 87       	std	Y+8, r25	; 0x08
    1fd8:	a9 87       	std	Y+9, r26	; 0x09
    1fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_displayCharacter+0x39a>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayCharacter+0x388>
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_displayCharacter+0x37c>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_displayCharacter+0x3c4>
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2090:	e9 96       	adiw	r28, 0x39	; 57
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <LCD_displayString+0x6>
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9b 83       	std	Y+3, r25	; 0x03
    20b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20b2:	19 82       	std	Y+1, r1	; 0x01
    20b4:	0e c0       	rjmp	.+28     	; 0x20d2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	fc 01       	movw	r30, r24
    20c2:	e2 0f       	add	r30, r18
    20c4:	f3 1f       	adc	r31, r19
    20c6:	80 81       	ld	r24, Z
    20c8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
		i++;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	fc 01       	movw	r30, r24
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	80 81       	ld	r24, Z
    20e4:	88 23       	and	r24, r24
    20e6:	39 f7       	brne	.-50     	; 0x20b6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <LCD_moveCursor+0x6>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <LCD_moveCursor+0x8>
    20fc:	0f 92       	push	r0
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	3d 83       	std	Y+5, r19	; 0x05
    210e:	2c 83       	std	Y+4, r18	; 0x04
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	c1 f0       	breq	.+48     	; 0x214a <LCD_moveCursor+0x56>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_moveCursor+0x3a>
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	61 f0       	breq	.+24     	; 0x2144 <LCD_moveCursor+0x50>
    212c:	19 c0       	rjmp	.+50     	; 0x2160 <LCD_moveCursor+0x6c>
    212e:	2c 81       	ldd	r18, Y+4	; 0x04
    2130:	3d 81       	ldd	r19, Y+5	; 0x05
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	69 f0       	breq	.+26     	; 0x2152 <LCD_moveCursor+0x5e>
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	83 30       	cpi	r24, 0x03	; 3
    213e:	91 05       	cpc	r25, r1
    2140:	61 f0       	breq	.+24     	; 0x215a <LCD_moveCursor+0x66>
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	80 5c       	subi	r24, 0xC0	; 192
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	80 5f       	subi	r24, 0xF0	; 240
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	03 c0       	rjmp	.+6      	; 0x2160 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	80 5b       	subi	r24, 0xB0	; 176
    215e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	80 68       	ori	r24, 0x80	; 128
    2164:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_displayStringRowColumn+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <LCD_displayStringRowColumn+0x8>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
    2188:	5c 83       	std	Y+4, r21	; 0x04
    218a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	6a 81       	ldd	r22, Y+2	; 0x02
    2190:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	62 97       	sbiw	r28, 0x12	; 18
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	9e 01       	movw	r18, r28
    21c8:	2f 5f       	subi	r18, 0xFF	; 255
    21ca:	3f 4f       	sbci	r19, 0xFF	; 255
    21cc:	b9 01       	movw	r22, r18
    21ce:	4a e0       	ldi	r20, 0x0A	; 10
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <itoa>
   LCD_displayString(buff); /* Display the string */
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
}
    21de:	62 96       	adiw	r28, 0x12	; 18
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <notMatchedProcedure>:
#include "lcd.h"
#include "keypad.h"

Timer1_ConfigType Config= {65534,0,F_CPU_1024,Normal} ;

uint8 notMatchedProcedure(void){
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	a6 97       	sbiw	r28, 0x26	; 38
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
	uint8 matchedFlag =0 ;
    221c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 i=0,i2;
    221e:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 passWord_temp[6] ;
	passWord_temp[5]='#' ;
    2220:	83 e2       	ldi	r24, 0x23	; 35
    2222:	8d a3       	std	Y+37, r24	; 0x25
	for(i=0;i<2;i++){
    2224:	1e 8e       	std	Y+30, r1	; 0x1e
    2226:	1a c1       	rjmp	.+564    	; 0x245c <notMatchedProcedure+0x258>
		LCD_clearScreen() ;
    2228:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    222c:	80 e6       	ldi	r24, 0x60	; 96
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
		LCD_moveCursor(1,0);
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
		for(i2=0; i2<5 ; i2++){
    223c:	1d 8e       	std	Y+29, r1	; 0x1d
    223e:	84 c0       	rjmp	.+264    	; 0x2348 <notMatchedProcedure+0x144>
			passWord_temp[i2]=KEYPAD_getPressedKey() ;
    2240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2242:	08 2f       	mov	r16, r24
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    224a:	28 2f       	mov	r18, r24
    224c:	ce 01       	movw	r24, r28
    224e:	80 96       	adiw	r24, 0x20	; 32
    2250:	fc 01       	movw	r30, r24
    2252:	e0 0f       	add	r30, r16
    2254:	f1 1f       	adc	r31, r17
    2256:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    2258:	8a e2       	ldi	r24, 0x2A	; 42
    225a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e8       	ldi	r25, 0x80	; 128
    2262:	ab e3       	ldi	r26, 0x3B	; 59
    2264:	b4 e4       	ldi	r27, 0x44	; 68
    2266:	89 8f       	std	Y+25, r24	; 0x19
    2268:	9a 8f       	std	Y+26, r25	; 0x1a
    226a:	ab 8f       	std	Y+27, r26	; 0x1b
    226c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8d 8b       	std	Y+21, r24	; 0x15
    2288:	9e 8b       	std	Y+22, r25	; 0x16
    228a:	af 8b       	std	Y+23, r26	; 0x17
    228c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228e:	6d 89       	ldd	r22, Y+21	; 0x15
    2290:	7e 89       	ldd	r23, Y+22	; 0x16
    2292:	8f 89       	ldd	r24, Y+23	; 0x17
    2294:	98 8d       	ldd	r25, Y+24	; 0x18
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <notMatchedProcedure+0xac>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <notMatchedProcedure+0x12a>
	else if (__tmp > 65535)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <notMatchedProcedure+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <notMatchedProcedure+0x10c>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9a 8b       	std	Y+18, r25	; 0x12
    22f8:	89 8b       	std	Y+17, r24	; 0x11
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	9a 89       	ldd	r25, Y+18	; 0x12
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <notMatchedProcedure+0xfa>
    2302:	9a 8b       	std	Y+18, r25	; 0x12
    2304:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9c 8b       	std	Y+20, r25	; 0x14
    230e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8b 89       	ldd	r24, Y+19	; 0x13
    2312:	9c 89       	ldd	r25, Y+20	; 0x14
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <notMatchedProcedure+0xee>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <notMatchedProcedure+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6d 89       	ldd	r22, Y+21	; 0x15
    231c:	7e 89       	ldd	r23, Y+22	; 0x16
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	98 8d       	ldd	r25, Y+24	; 0x18
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	8b 89       	ldd	r24, Y+19	; 0x13
    2330:	9c 89       	ldd	r25, Y+20	; 0x14
    2332:	98 8b       	std	Y+16, r25	; 0x10
    2334:	8f 87       	std	Y+15, r24	; 0x0f
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	98 89       	ldd	r25, Y+16	; 0x10
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <notMatchedProcedure+0x136>
    233e:	98 8b       	std	Y+16, r25	; 0x10
    2340:	8f 87       	std	Y+15, r24	; 0x0f
	passWord_temp[5]='#' ;
	for(i=0;i<2;i++){
		LCD_clearScreen() ;
		LCD_displayString("plz enter pass:");
		LCD_moveCursor(1,0);
		for(i2=0; i2<5 ; i2++){
    2342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	8d 8f       	std	Y+29, r24	; 0x1d
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	85 30       	cpi	r24, 0x05	; 5
    234c:	08 f4       	brcc	.+2      	; 0x2350 <notMatchedProcedure+0x14c>
    234e:	78 cf       	rjmp	.-272    	; 0x2240 <notMatchedProcedure+0x3c>
			LCD_displayCharacter('*');
			_delay_ms(750);


		}
		while(KEYPAD_getPressedKey()!=ENTER);
    2350:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    2354:	8d 33       	cpi	r24, 0x3D	; 61
    2356:	e1 f7       	brne	.-8      	; 0x2350 <notMatchedProcedure+0x14c>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e8       	ldi	r25, 0x80	; 128
    235c:	ab e3       	ldi	r26, 0x3B	; 59
    235e:	b4 e4       	ldi	r27, 0x44	; 68
    2360:	8b 87       	std	Y+11, r24	; 0x0b
    2362:	9c 87       	std	Y+12, r25	; 0x0c
    2364:	ad 87       	std	Y+13, r26	; 0x0d
    2366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6b 85       	ldd	r22, Y+11	; 0x0b
    236a:	7c 85       	ldd	r23, Y+12	; 0x0c
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8f 83       	std	Y+7, r24	; 0x07
    2382:	98 87       	std	Y+8, r25	; 0x08
    2384:	a9 87       	std	Y+9, r26	; 0x09
    2386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <notMatchedProcedure+0x1a6>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <notMatchedProcedure+0x224>
	else if (__tmp > 65535)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <notMatchedProcedure+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <notMatchedProcedure+0x206>
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <notMatchedProcedure+0x1f4>
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <notMatchedProcedure+0x1e8>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <notMatchedProcedure+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6f 81       	ldd	r22, Y+7	; 0x07
    2416:	78 85       	ldd	r23, Y+8	; 0x08
    2418:	89 85       	ldd	r24, Y+9	; 0x09
    241a:	9a 85       	ldd	r25, Y+10	; 0x0a
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <notMatchedProcedure+0x230>
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(750);
		UART_sendString(passWord_temp);
    243c:	ce 01       	movw	r24, r28
    243e:	80 96       	adiw	r24, 0x20	; 32
    2440:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <UART_sendString>
		matchedFlag=UART_recieveByte();
    2444:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    2448:	8f 8f       	std	Y+31, r24	; 0x1f
		if(matchedFlag){
    244a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    244c:	88 23       	and	r24, r24
    244e:	19 f0       	breq	.+6      	; 0x2456 <notMatchedProcedure+0x252>
			return matchedFlag ;
    2450:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2452:	8e a3       	std	Y+38, r24	; 0x26
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <notMatchedProcedure+0x264>
uint8 notMatchedProcedure(void){
	uint8 matchedFlag =0 ;
	uint8 i=0,i2;
	uint8 passWord_temp[6] ;
	passWord_temp[5]='#' ;
	for(i=0;i<2;i++){
    2456:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	8e 8f       	std	Y+30, r24	; 0x1e
    245c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	08 f4       	brcc	.+2      	; 0x2464 <notMatchedProcedure+0x260>
    2462:	e2 ce       	rjmp	.-572    	; 0x2228 <notMatchedProcedure+0x24>
		matchedFlag=UART_recieveByte();
		if(matchedFlag){
			return matchedFlag ;
		}
	}
	return matchedFlag ;
    2464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2466:	8e a3       	std	Y+38, r24	; 0x26
    2468:	8e a1       	ldd	r24, Y+38	; 0x26
}
    246a:	a6 96       	adiw	r28, 0x26	; 38
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <doorProcedures>:
volatile uint8  cnt=0 ;
void doorProcedures(void){
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62



	if(cnt==0){
    2488:	80 91 f8 00 	lds	r24, 0x00F8
    248c:	88 23       	and	r24, r24
    248e:	81 f4       	brne	.+32     	; 0x24b0 <doorProcedures+0x30>
		Config.initial_value=13885 ;
    2490:	8d e3       	ldi	r24, 0x3D	; 61
    2492:	96 e3       	ldi	r25, 0x36	; 54
    2494:	90 93 ea 00 	sts	0x00EA, r25
    2498:	80 93 e9 00 	sts	0x00E9, r24
		Timer1_init(&Config);
    249c:	89 ee       	ldi	r24, 0xE9	; 233
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
		cnt++;
    24a4:	80 91 f8 00 	lds	r24, 0x00F8
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	80 93 f8 00 	sts	0x00F8, r24
    24ae:	4d c0       	rjmp	.+154    	; 0x254a <doorProcedures+0xca>
	}else if (cnt==1){
    24b0:	80 91 f8 00 	lds	r24, 0x00F8
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	31 f4       	brne	.+12     	; 0x24c4 <doorProcedures+0x44>

		cnt++;
    24b8:	80 91 f8 00 	lds	r24, 0x00F8
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	80 93 f8 00 	sts	0x00F8, r24
    24c2:	43 c0       	rjmp	.+134    	; 0x254a <doorProcedures+0xca>
	}else if (cnt==2){
    24c4:	80 91 f8 00 	lds	r24, 0x00F8
    24c8:	82 30       	cpi	r24, 0x02	; 2
    24ca:	81 f4       	brne	.+32     	; 0x24ec <doorProcedures+0x6c>

		Config.initial_value=42099 ;
    24cc:	83 e7       	ldi	r24, 0x73	; 115
    24ce:	94 ea       	ldi	r25, 0xA4	; 164
    24d0:	90 93 ea 00 	sts	0x00EA, r25
    24d4:	80 93 e9 00 	sts	0x00E9, r24
		Timer1_init(&Config);
    24d8:	89 ee       	ldi	r24, 0xE9	; 233
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
		cnt++;
    24e0:	80 91 f8 00 	lds	r24, 0x00F8
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	80 93 f8 00 	sts	0x00F8, r24
    24ea:	2f c0       	rjmp	.+94     	; 0x254a <doorProcedures+0xca>
	}else if (cnt==3){
    24ec:	80 91 f8 00 	lds	r24, 0x00F8
    24f0:	83 30       	cpi	r24, 0x03	; 3
    24f2:	81 f4       	brne	.+32     	; 0x2514 <doorProcedures+0x94>
		Config.initial_value=13885;
    24f4:	8d e3       	ldi	r24, 0x3D	; 61
    24f6:	96 e3       	ldi	r25, 0x36	; 54
    24f8:	90 93 ea 00 	sts	0x00EA, r25
    24fc:	80 93 e9 00 	sts	0x00E9, r24
		cnt++;
    2500:	80 91 f8 00 	lds	r24, 0x00F8
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	80 93 f8 00 	sts	0x00F8, r24
		Timer1_init(&Config);
    250a:	89 ee       	ldi	r24, 0xE9	; 233
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
    2512:	1b c0       	rjmp	.+54     	; 0x254a <doorProcedures+0xca>
	}else if (cnt==4){
    2514:	80 91 f8 00 	lds	r24, 0x00F8
    2518:	84 30       	cpi	r24, 0x04	; 4
    251a:	31 f4       	brne	.+12     	; 0x2528 <doorProcedures+0xa8>
		cnt++;
    251c:	80 91 f8 00 	lds	r24, 0x00F8
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	80 93 f8 00 	sts	0x00F8, r24
    2526:	11 c0       	rjmp	.+34     	; 0x254a <doorProcedures+0xca>
	}else if (cnt==5){
    2528:	80 91 f8 00 	lds	r24, 0x00F8
    252c:	85 30       	cpi	r24, 0x05	; 5
    252e:	69 f4       	brne	.+26     	; 0x254a <doorProcedures+0xca>

		Config.initial_value=65534 ;
    2530:	8e ef       	ldi	r24, 0xFE	; 254
    2532:	9f ef       	ldi	r25, 0xFF	; 255
    2534:	90 93 ea 00 	sts	0x00EA, r25
    2538:	80 93 e9 00 	sts	0x00E9, r24

		Timer1_deInit() ;
    253c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Timer1_deInit>
		cnt++;
    2540:	80 91 f8 00 	lds	r24, 0x00F8
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	80 93 f8 00 	sts	0x00F8, r24
	}

}
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <checkCount>:
void checkCount (void){
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	while(1){
		if(cnt==0){
    2558:	80 91 f8 00 	lds	r24, 0x00F8
    255c:	88 23       	and	r24, r24
    255e:	49 f4       	brne	.+18     	; 0x2572 <checkCount+0x22>
			LCD_moveCursor(0,0);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
			LCD_displayString("Unlock the Door");
    2568:	80 e7       	ldi	r24, 0x70	; 112
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    2570:	f3 cf       	rjmp	.-26     	; 0x2558 <checkCount+0x8>

		}else if (cnt==3){
    2572:	80 91 f8 00 	lds	r24, 0x00F8
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	19 f4       	brne	.+6      	; 0x2580 <checkCount+0x30>
			LCD_clearScreen();
    257a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
    257e:	ec cf       	rjmp	.-40     	; 0x2558 <checkCount+0x8>

		}else if (cnt==4){
    2580:	80 91 f8 00 	lds	r24, 0x00F8
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	49 f4       	brne	.+18     	; 0x259a <checkCount+0x4a>
			LCD_moveCursor(0,0);
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
			LCD_displayString("DOOR is Locking  ") ;
    2590:	80 e8       	ldi	r24, 0x80	; 128
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    2598:	df cf       	rjmp	.-66     	; 0x2558 <checkCount+0x8>

		}else if (cnt==6){
    259a:	80 91 f8 00 	lds	r24, 0x00F8
    259e:	86 30       	cpi	r24, 0x06	; 6
    25a0:	d9 f6       	brne	.-74     	; 0x2558 <checkCount+0x8>
			cnt=0;
    25a2:	10 92 f8 00 	sts	0x00F8, r1
			break ;
		}
	}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <addNewPassword>:
}
void addNewPassword(void){
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	c6 54       	subi	r28, 0x46	; 70
    25ba:	d0 40       	sbci	r29, 0x00	; 0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
	sint8 passWord_1[6] ;
	sint8 passWord_2[6] ;
	uint8 counter =0 ;
    25c6:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 matchedFlag =0 ;
    25c8:	19 ae       	std	Y+57, r1	; 0x39
	passWord_1[5]='#';
    25ca:	83 e2       	ldi	r24, 0x23	; 35
    25cc:	fe 01       	movw	r30, r28
    25ce:	e0 5c       	subi	r30, 0xC0	; 192
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 83       	st	Z, r24
	passWord_2[5]='#';
    25d4:	fe 01       	movw	r30, r28
    25d6:	ea 5b       	subi	r30, 0xBA	; 186
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	83 e2       	ldi	r24, 0x23	; 35
    25dc:	80 83       	st	Z, r24
    25de:	25 c2       	rjmp	.+1098   	; 0x2a2a <addNewPassword+0x47e>


	while(!matchedFlag){
		LCD_clearScreen() ;
    25e0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    25e4:	80 e6       	ldi	r24, 0x60	; 96
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
		LCD_moveCursor(1,0);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
		for(counter=0; counter<5 ; counter++){
    25f4:	1a ae       	std	Y+58, r1	; 0x3a
    25f6:	84 c0       	rjmp	.+264    	; 0x2700 <addNewPassword+0x154>
			passWord_1[counter]=KEYPAD_getPressedKey() ;
    25f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    25fa:	08 2f       	mov	r16, r24
    25fc:	10 e0       	ldi	r17, 0x00	; 0
    25fe:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    2602:	28 2f       	mov	r18, r24
    2604:	ce 01       	movw	r24, r28
    2606:	cb 96       	adiw	r24, 0x3b	; 59
    2608:	fc 01       	movw	r30, r24
    260a:	e0 0f       	add	r30, r16
    260c:	f1 1f       	adc	r31, r17
    260e:	20 83       	st	Z, r18

			LCD_displayCharacter('*');
    2610:	8a e2       	ldi	r24, 0x2A	; 42
    2612:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e8       	ldi	r25, 0x80	; 128
    261a:	ab e3       	ldi	r26, 0x3B	; 59
    261c:	b4 e4       	ldi	r27, 0x44	; 68
    261e:	8d ab       	std	Y+53, r24	; 0x35
    2620:	9e ab       	std	Y+54, r25	; 0x36
    2622:	af ab       	std	Y+55, r26	; 0x37
    2624:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6d a9       	ldd	r22, Y+53	; 0x35
    2628:	7e a9       	ldd	r23, Y+54	; 0x36
    262a:	8f a9       	ldd	r24, Y+55	; 0x37
    262c:	98 ad       	ldd	r25, Y+56	; 0x38
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a ef       	ldi	r20, 0xFA	; 250
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	89 ab       	std	Y+49, r24	; 0x31
    2640:	9a ab       	std	Y+50, r25	; 0x32
    2642:	ab ab       	std	Y+51, r26	; 0x33
    2644:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2646:	69 a9       	ldd	r22, Y+49	; 0x31
    2648:	7a a9       	ldd	r23, Y+50	; 0x32
    264a:	8b a9       	ldd	r24, Y+51	; 0x33
    264c:	9c a9       	ldd	r25, Y+52	; 0x34
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <addNewPassword+0xbc>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	98 ab       	std	Y+48, r25	; 0x30
    2664:	8f a7       	std	Y+47, r24	; 0x2f
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <addNewPassword+0x13a>
	else if (__tmp > 65535)
    2668:	69 a9       	ldd	r22, Y+49	; 0x31
    266a:	7a a9       	ldd	r23, Y+50	; 0x32
    266c:	8b a9       	ldd	r24, Y+51	; 0x33
    266e:	9c a9       	ldd	r25, Y+52	; 0x34
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <addNewPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6d a9       	ldd	r22, Y+53	; 0x35
    2682:	7e a9       	ldd	r23, Y+54	; 0x36
    2684:	8f a9       	ldd	r24, Y+55	; 0x37
    2686:	98 ad       	ldd	r25, Y+56	; 0x38
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	98 ab       	std	Y+48, r25	; 0x30
    26a6:	8f a7       	std	Y+47, r24	; 0x2f
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <addNewPassword+0x11c>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9e a7       	std	Y+46, r25	; 0x2e
    26b0:	8d a7       	std	Y+45, r24	; 0x2d
    26b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <addNewPassword+0x10a>
    26ba:	9e a7       	std	Y+46, r25	; 0x2e
    26bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c0:	98 a9       	ldd	r25, Y+48	; 0x30
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	98 ab       	std	Y+48, r25	; 0x30
    26c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ca:	98 a9       	ldd	r25, Y+48	; 0x30
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <addNewPassword+0xfe>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <addNewPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	69 a9       	ldd	r22, Y+49	; 0x31
    26d4:	7a a9       	ldd	r23, Y+50	; 0x32
    26d6:	8b a9       	ldd	r24, Y+51	; 0x33
    26d8:	9c a9       	ldd	r25, Y+52	; 0x34
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	98 ab       	std	Y+48, r25	; 0x30
    26e4:	8f a7       	std	Y+47, r24	; 0x2f
    26e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ea:	9c a7       	std	Y+44, r25	; 0x2c
    26ec:	8b a7       	std	Y+43, r24	; 0x2b
    26ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <addNewPassword+0x146>
    26f6:	9c a7       	std	Y+44, r25	; 0x2c
    26f8:	8b a7       	std	Y+43, r24	; 0x2b

	while(!matchedFlag){
		LCD_clearScreen() ;
		LCD_displayString("plz enter pass:");
		LCD_moveCursor(1,0);
		for(counter=0; counter<5 ; counter++){
    26fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	8a af       	std	Y+58, r24	; 0x3a
    2700:	8a ad       	ldd	r24, Y+58	; 0x3a
    2702:	85 30       	cpi	r24, 0x05	; 5
    2704:	08 f4       	brcc	.+2      	; 0x2708 <addNewPassword+0x15c>
    2706:	78 cf       	rjmp	.-272    	; 0x25f8 <addNewPassword+0x4c>
			LCD_displayCharacter('*');
			_delay_ms(750);


		}
		while(KEYPAD_getPressedKey()!=ENTER);
    2708:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    270c:	8d 33       	cpi	r24, 0x3D	; 61
    270e:	e1 f7       	brne	.-8      	; 0x2708 <addNewPassword+0x15c>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e8       	ldi	r25, 0x80	; 128
    2714:	ab e3       	ldi	r26, 0x3B	; 59
    2716:	b4 e4       	ldi	r27, 0x44	; 68
    2718:	8f a3       	std	Y+39, r24	; 0x27
    271a:	98 a7       	std	Y+40, r25	; 0x28
    271c:	a9 a7       	std	Y+41, r26	; 0x29
    271e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6f a1       	ldd	r22, Y+39	; 0x27
    2722:	78 a5       	ldd	r23, Y+40	; 0x28
    2724:	89 a5       	ldd	r24, Y+41	; 0x29
    2726:	9a a5       	ldd	r25, Y+42	; 0x2a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8b a3       	std	Y+35, r24	; 0x23
    273a:	9c a3       	std	Y+36, r25	; 0x24
    273c:	ad a3       	std	Y+37, r26	; 0x25
    273e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2740:	6b a1       	ldd	r22, Y+35	; 0x23
    2742:	7c a1       	ldd	r23, Y+36	; 0x24
    2744:	8d a1       	ldd	r24, Y+37	; 0x25
    2746:	9e a1       	ldd	r25, Y+38	; 0x26
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <addNewPassword+0x1b6>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <addNewPassword+0x234>
	else if (__tmp > 65535)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <addNewPassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6f a1       	ldd	r22, Y+39	; 0x27
    277c:	78 a5       	ldd	r23, Y+40	; 0x28
    277e:	89 a5       	ldd	r24, Y+41	; 0x29
    2780:	9a a5       	ldd	r25, Y+42	; 0x2a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9a a3       	std	Y+34, r25	; 0x22
    27a0:	89 a3       	std	Y+33, r24	; 0x21
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <addNewPassword+0x216>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	98 a3       	std	Y+32, r25	; 0x20
    27aa:	8f 8f       	std	Y+31, r24	; 0x1f
    27ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ae:	98 a1       	ldd	r25, Y+32	; 0x20
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <addNewPassword+0x204>
    27b4:	98 a3       	std	Y+32, r25	; 0x20
    27b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <addNewPassword+0x1f8>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <addNewPassword+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6b a1       	ldd	r22, Y+35	; 0x23
    27ce:	7c a1       	ldd	r23, Y+36	; 0x24
    27d0:	8d a1       	ldd	r24, Y+37	; 0x25
    27d2:	9e a1       	ldd	r25, Y+38	; 0x26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9a a3       	std	Y+34, r25	; 0x22
    27de:	89 a3       	std	Y+33, r24	; 0x21
    27e0:	89 a1       	ldd	r24, Y+33	; 0x21
    27e2:	9a a1       	ldd	r25, Y+34	; 0x22
    27e4:	9e 8f       	std	Y+30, r25	; 0x1e
    27e6:	8d 8f       	std	Y+29, r24	; 0x1d
    27e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <addNewPassword+0x240>
    27f0:	9e 8f       	std	Y+30, r25	; 0x1e
    27f2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(750);
		LCD_clearScreen() ;
    27f4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
		LCD_displayString("plz re-enter the");
    27f8:	82 e9       	ldi	r24, 0x92	; 146
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
		LCD_moveCursor(1,0) ;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
		LCD_displayString("same pass:");
    2808:	83 ea       	ldi	r24, 0xA3	; 163
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
		for(counter=0; counter<5 ; counter++){
    2810:	1a ae       	std	Y+58, r1	; 0x3a
    2812:	85 c0       	rjmp	.+266    	; 0x291e <addNewPassword+0x372>
			passWord_2[counter]=KEYPAD_getPressedKey() ;
    2814:	8a ad       	ldd	r24, Y+58	; 0x3a
    2816:	08 2f       	mov	r16, r24
    2818:	10 e0       	ldi	r17, 0x00	; 0
    281a:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    281e:	28 2f       	mov	r18, r24
    2820:	ce 01       	movw	r24, r28
    2822:	8f 5b       	subi	r24, 0xBF	; 191
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	fc 01       	movw	r30, r24
    2828:	e0 0f       	add	r30, r16
    282a:	f1 1f       	adc	r31, r17
    282c:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    282e:	8a e2       	ldi	r24, 0x2A	; 42
    2830:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e8       	ldi	r25, 0x80	; 128
    2838:	ab e3       	ldi	r26, 0x3B	; 59
    283a:	b4 e4       	ldi	r27, 0x44	; 68
    283c:	89 8f       	std	Y+25, r24	; 0x19
    283e:	9a 8f       	std	Y+26, r25	; 0x1a
    2840:	ab 8f       	std	Y+27, r26	; 0x1b
    2842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	69 8d       	ldd	r22, Y+25	; 0x19
    2846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8d 8b       	std	Y+21, r24	; 0x15
    285e:	9e 8b       	std	Y+22, r25	; 0x16
    2860:	af 8b       	std	Y+23, r26	; 0x17
    2862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <addNewPassword+0x2da>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <addNewPassword+0x358>
	else if (__tmp > 65535)
    2886:	6d 89       	ldd	r22, Y+21	; 0x15
    2888:	7e 89       	ldd	r23, Y+22	; 0x16
    288a:	8f 89       	ldd	r24, Y+23	; 0x17
    288c:	98 8d       	ldd	r25, Y+24	; 0x18
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <addNewPassword+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	69 8d       	ldd	r22, Y+25	; 0x19
    28a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <addNewPassword+0x33a>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	89 8b       	std	Y+17, r24	; 0x11
    28d0:	89 89       	ldd	r24, Y+17	; 0x11
    28d2:	9a 89       	ldd	r25, Y+18	; 0x12
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <addNewPassword+0x328>
    28d8:	9a 8b       	std	Y+18, r25	; 0x12
    28da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <addNewPassword+0x31c>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <addNewPassword+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	98 8b       	std	Y+16, r25	; 0x10
    290a:	8f 87       	std	Y+15, r24	; 0x0f
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	98 89       	ldd	r25, Y+16	; 0x10
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <addNewPassword+0x364>
    2914:	98 8b       	std	Y+16, r25	; 0x10
    2916:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(750);
		LCD_clearScreen() ;
		LCD_displayString("plz re-enter the");
		LCD_moveCursor(1,0) ;
		LCD_displayString("same pass:");
		for(counter=0; counter<5 ; counter++){
    2918:	8a ad       	ldd	r24, Y+58	; 0x3a
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	8a af       	std	Y+58, r24	; 0x3a
    291e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2920:	85 30       	cpi	r24, 0x05	; 5
    2922:	08 f4       	brcc	.+2      	; 0x2926 <addNewPassword+0x37a>
    2924:	77 cf       	rjmp	.-274    	; 0x2814 <addNewPassword+0x268>
			passWord_2[counter]=KEYPAD_getPressedKey() ;
			LCD_displayCharacter('*');
			_delay_ms(750);

		}
		while(KEYPAD_getPressedKey()!=ENTER);
    2926:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    292a:	8d 33       	cpi	r24, 0x3D	; 61
    292c:	e1 f7       	brne	.-8      	; 0x2926 <addNewPassword+0x37a>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e8       	ldi	r25, 0x80	; 128
    2932:	ab e3       	ldi	r26, 0x3B	; 59
    2934:	b4 e4       	ldi	r27, 0x44	; 68
    2936:	8b 87       	std	Y+11, r24	; 0x0b
    2938:	9c 87       	std	Y+12, r25	; 0x0c
    293a:	ad 87       	std	Y+13, r26	; 0x0d
    293c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a ef       	ldi	r20, 0xFA	; 250
    294c:	54 e4       	ldi	r21, 0x44	; 68
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	8f 83       	std	Y+7, r24	; 0x07
    2958:	98 87       	std	Y+8, r25	; 0x08
    295a:	a9 87       	std	Y+9, r26	; 0x09
    295c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <addNewPassword+0x3d4>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9e 83       	std	Y+6, r25	; 0x06
    297c:	8d 83       	std	Y+5, r24	; 0x05
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <addNewPassword+0x452>
	else if (__tmp > 65535)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <addNewPassword+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6b 85       	ldd	r22, Y+11	; 0x0b
    299a:	7c 85       	ldd	r23, Y+12	; 0x0c
    299c:	8d 85       	ldd	r24, Y+13	; 0x0d
    299e:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <addNewPassword+0x434>
    29c2:	88 ec       	ldi	r24, 0xC8	; 200
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <addNewPassword+0x422>
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	9e 81       	ldd	r25, Y+6	; 0x06
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <addNewPassword+0x416>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <addNewPassword+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <addNewPassword+0x45e>
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(750);
		UART_sendString(passWord_1);
    2a12:	ce 01       	movw	r24, r28
    2a14:	cb 96       	adiw	r24, 0x3b	; 59
    2a16:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <UART_sendString>
		UART_sendString(passWord_2);
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	8f 5b       	subi	r24, 0xBF	; 191
    2a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a20:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <UART_sendString>
		matchedFlag=UART_recieveByte();
    2a24:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    2a28:	89 af       	std	Y+57, r24	; 0x39
	uint8 matchedFlag =0 ;
	passWord_1[5]='#';
	passWord_2[5]='#';


	while(!matchedFlag){
    2a2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <addNewPassword+0x486>
    2a30:	d7 cd       	rjmp	.-1106   	; 0x25e0 <addNewPassword+0x34>
		UART_sendString(passWord_2);
		matchedFlag=UART_recieveByte();


	}
}
    2a32:	ca 5b       	subi	r28, 0xBA	; 186
    2a34:	df 4f       	sbci	r29, 0xFF	; 255
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	08 95       	ret

00002a4a <main>:

void main (void){
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	c0 5b       	subi	r28, 0xB0	; 176
    2a58:	d0 40       	sbci	r29, 0x00	; 0
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config ={EightDataBits,EvenParity,OneBit,9600} ;
    2a64:	ce 01       	movw	r24, r28
    2a66:	81 56       	subi	r24, 0x61	; 97
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	c4 55       	subi	r28, 0x54	; 84
    2a6c:	df 4f       	sbci	r29, 0xFF	; 255
    2a6e:	99 83       	std	Y+1, r25	; 0x01
    2a70:	88 83       	st	Y, r24
    2a72:	cc 5a       	subi	r28, 0xAC	; 172
    2a74:	d0 40       	sbci	r29, 0x00	; 0
    2a76:	8f ee       	ldi	r24, 0xEF	; 239
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	c2 55       	subi	r28, 0x52	; 82
    2a7c:	df 4f       	sbci	r29, 0xFF	; 255
    2a7e:	99 83       	std	Y+1, r25	; 0x01
    2a80:	88 83       	st	Y, r24
    2a82:	ce 5a       	subi	r28, 0xAE	; 174
    2a84:	d0 40       	sbci	r29, 0x00	; 0
    2a86:	97 e0       	ldi	r25, 0x07	; 7
    2a88:	c0 55       	subi	r28, 0x50	; 80
    2a8a:	df 4f       	sbci	r29, 0xFF	; 255
    2a8c:	98 83       	st	Y, r25
    2a8e:	c0 5b       	subi	r28, 0xB0	; 176
    2a90:	d0 40       	sbci	r29, 0x00	; 0
    2a92:	c2 55       	subi	r28, 0x52	; 82
    2a94:	df 4f       	sbci	r29, 0xFF	; 255
    2a96:	e8 81       	ld	r30, Y
    2a98:	f9 81       	ldd	r31, Y+1	; 0x01
    2a9a:	ce 5a       	subi	r28, 0xAE	; 174
    2a9c:	d0 40       	sbci	r29, 0x00	; 0
    2a9e:	00 80       	ld	r0, Z
    2aa0:	c2 55       	subi	r28, 0x52	; 82
    2aa2:	df 4f       	sbci	r29, 0xFF	; 255
    2aa4:	88 81       	ld	r24, Y
    2aa6:	99 81       	ldd	r25, Y+1	; 0x01
    2aa8:	ce 5a       	subi	r28, 0xAE	; 174
    2aaa:	d0 40       	sbci	r29, 0x00	; 0
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	c2 55       	subi	r28, 0x52	; 82
    2ab0:	df 4f       	sbci	r29, 0xFF	; 255
    2ab2:	99 83       	std	Y+1, r25	; 0x01
    2ab4:	88 83       	st	Y, r24
    2ab6:	ce 5a       	subi	r28, 0xAE	; 174
    2ab8:	d0 40       	sbci	r29, 0x00	; 0
    2aba:	c4 55       	subi	r28, 0x54	; 84
    2abc:	df 4f       	sbci	r29, 0xFF	; 255
    2abe:	e8 81       	ld	r30, Y
    2ac0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ac2:	cc 5a       	subi	r28, 0xAC	; 172
    2ac4:	d0 40       	sbci	r29, 0x00	; 0
    2ac6:	00 82       	st	Z, r0
    2ac8:	c4 55       	subi	r28, 0x54	; 84
    2aca:	df 4f       	sbci	r29, 0xFF	; 255
    2acc:	88 81       	ld	r24, Y
    2ace:	99 81       	ldd	r25, Y+1	; 0x01
    2ad0:	cc 5a       	subi	r28, 0xAC	; 172
    2ad2:	d0 40       	sbci	r29, 0x00	; 0
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	c4 55       	subi	r28, 0x54	; 84
    2ad8:	df 4f       	sbci	r29, 0xFF	; 255
    2ada:	99 83       	std	Y+1, r25	; 0x01
    2adc:	88 83       	st	Y, r24
    2ade:	cc 5a       	subi	r28, 0xAC	; 172
    2ae0:	d0 40       	sbci	r29, 0x00	; 0
    2ae2:	c0 55       	subi	r28, 0x50	; 80
    2ae4:	df 4f       	sbci	r29, 0xFF	; 255
    2ae6:	98 81       	ld	r25, Y
    2ae8:	c0 5b       	subi	r28, 0xB0	; 176
    2aea:	d0 40       	sbci	r29, 0x00	; 0
    2aec:	91 50       	subi	r25, 0x01	; 1
    2aee:	c0 55       	subi	r28, 0x50	; 80
    2af0:	df 4f       	sbci	r29, 0xFF	; 255
    2af2:	98 83       	st	Y, r25
    2af4:	c0 5b       	subi	r28, 0xB0	; 176
    2af6:	d0 40       	sbci	r29, 0x00	; 0
    2af8:	c0 55       	subi	r28, 0x50	; 80
    2afa:	df 4f       	sbci	r29, 0xFF	; 255
    2afc:	e8 81       	ld	r30, Y
    2afe:	c0 5b       	subi	r28, 0xB0	; 176
    2b00:	d0 40       	sbci	r29, 0x00	; 0
    2b02:	ee 23       	and	r30, r30
    2b04:	31 f6       	brne	.-116    	; 0x2a92 <main+0x48>
	uint8 matchedFlag =0 ;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e2 56       	subi	r30, 0x62	; 98
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	10 82       	st	Z, r1
	uint8 changed=0;
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e3 56       	subi	r30, 0x63	; 99
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	10 82       	st	Z, r1
	uint8 passWord_2[6] ;
	uint8 counter =0 ;
    2b16:	fe 01       	movw	r30, r28
    2b18:	e4 56       	subi	r30, 0x64	; 100
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	10 82       	st	Z, r1
	uint8 mainSystemOption;
	SREG|=(1<<7);
    2b1e:	af e5       	ldi	r26, 0x5F	; 95
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	ef e5       	ldi	r30, 0x5F	; 95
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	80 68       	ori	r24, 0x80	; 128
    2b2a:	8c 93       	st	X, r24
	passWord_2[5]='#';
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ea 55       	subi	r30, 0x5A	; 90
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	83 e2       	ldi	r24, 0x23	; 35
    2b34:	85 83       	std	Z+5, r24	; 0x05

	LCD_init();
    2b36:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <LCD_init>



	UART_init(&UART_Config);
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	81 56       	subi	r24, 0x61	; 97
    2b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b40:	0e 94 65 1d 	call	0x3aca	; 0x3aca <UART_init>
	addNewPassword();
    2b44:	0e 94 d6 12 	call	0x25ac	; 0x25ac <addNewPassword>

	while (1){

		LCD_clearScreen();
    2b48:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
		changed=0;
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e3 56       	subi	r30, 0x63	; 99
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	10 82       	st	Z, r1
		LCD_moveCursor(0,0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
    2b5c:	8e ea       	ldi	r24, 0xAE	; 174
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
		LCD_moveCursor(1,0);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    2b6c:	8c eb       	ldi	r24, 0xBC	; 188
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>

		mainSystemOption=KEYPAD_getPressedKey() ;
    2b74:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e5 56       	subi	r30, 0x65	; 101
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 83       	st	Z, r24
    2b80:	fe 01       	movw	r30, r28
    2b82:	e9 56       	subi	r30, 0x69	; 105
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e8       	ldi	r25, 0x80	; 128
    2b8a:	ab e3       	ldi	r26, 0x3B	; 59
    2b8c:	b4 e4       	ldi	r27, 0x44	; 68
    2b8e:	80 83       	st	Z, r24
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	a2 83       	std	Z+2, r26	; 0x02
    2b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b96:	8e 01       	movw	r16, r28
    2b98:	0d 56       	subi	r16, 0x6D	; 109
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e9 56       	subi	r30, 0x69	; 105
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	80 83       	st	Z, r24
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	a2 83       	std	Z+2, r26	; 0x02
    2bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 56       	subi	r30, 0x6D	; 109
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	44 f4       	brge	.+16     	; 0x2bf2 <main+0x1a8>
		__ticks = 1;
    2be2:	fe 01       	movw	r30, r28
    2be4:	ef 56       	subi	r30, 0x6F	; 111
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	64 c0       	rjmp	.+200    	; 0x2cba <main+0x270>
	else if (__tmp > 65535)
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 56       	subi	r30, 0x6D	; 109
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	3f ef       	ldi	r19, 0xFF	; 255
    2c04:	4f e7       	ldi	r20, 0x7F	; 127
    2c06:	57 e4       	ldi	r21, 0x47	; 71
    2c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c0c:	18 16       	cp	r1, r24
    2c0e:	0c f0       	brlt	.+2      	; 0x2c12 <main+0x1c8>
    2c10:	43 c0       	rjmp	.+134    	; 0x2c98 <main+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	fe 01       	movw	r30, r28
    2c14:	e9 56       	subi	r30, 0x69	; 105
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8e 01       	movw	r16, r28
    2c32:	0f 56       	subi	r16, 0x6F	; 111
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	f8 01       	movw	r30, r16
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
    2c48:	1f c0       	rjmp	.+62     	; 0x2c88 <main+0x23e>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e1 57       	subi	r30, 0x71	; 113
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	88 ec       	ldi	r24, 0xC8	; 200
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e1 57       	subi	r30, 0x71	; 113
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <main+0x218>
    2c66:	fe 01       	movw	r30, r28
    2c68:	e1 57       	subi	r30, 0x71	; 113
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	de 01       	movw	r26, r28
    2c72:	af 56       	subi	r26, 0x6F	; 111
    2c74:	bf 4f       	sbci	r27, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	ef 56       	subi	r30, 0x6F	; 111
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	9c 93       	st	X, r25
    2c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ef 56       	subi	r30, 0x6F	; 111
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	d1 f6       	brne	.-76     	; 0x2c4a <main+0x200>
    2c96:	27 c0       	rjmp	.+78     	; 0x2ce6 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	8e 01       	movw	r16, r28
    2c9a:	0f 56       	subi	r16, 0x6F	; 111
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 56       	subi	r30, 0x6D	; 109
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    2cba:	de 01       	movw	r26, r28
    2cbc:	a3 57       	subi	r26, 0x73	; 115
    2cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ef 56       	subi	r30, 0x6F	; 111
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	91 81       	ldd	r25, Z+1	; 0x01
    2cca:	8d 93       	st	X+, r24
    2ccc:	9c 93       	st	X, r25
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e3 57       	subi	r30, 0x73	; 115
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	91 81       	ldd	r25, Z+1	; 0x01
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <main+0x28e>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e3 57       	subi	r30, 0x73	; 115
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
		_delay_ms(750);
		LCD_clearScreen() ;
    2ce6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
		if(mainSystemOption==OPEN_DOOR){
    2cea:	fe 01       	movw	r30, r28
    2cec:	e5 56       	subi	r30, 0x65	; 101
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8b 32       	cpi	r24, 0x2B	; 43
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <main+0x2ae>
    2cf6:	0f c4       	rjmp	.+2078   	; 0x3516 <main+0xacc>
			UART_sendByte(OPEN_DOOR);
    2cf8:	8b e2       	ldi	r24, 0x2B	; 43
    2cfa:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <UART_sendByte>
			LCD_displayString("plz enter pass:");
    2cfe:	80 e6       	ldi	r24, 0x60	; 96
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
			LCD_moveCursor(1,0);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
			for(counter=0; counter<5 ; counter++){
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e4 56       	subi	r30, 0x64	; 100
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	10 82       	st	Z, r1
    2d16:	cf c0       	rjmp	.+414    	; 0x2eb6 <main+0x46c>
				passWord_2[counter]=KEYPAD_getPressedKey() ;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e4 56       	subi	r30, 0x64	; 100
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	08 2f       	mov	r16, r24
    2d22:	10 e0       	ldi	r17, 0x00	; 0
    2d24:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    2d28:	28 2f       	mov	r18, r24
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	8a 55       	subi	r24, 0x5A	; 90
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	fc 01       	movw	r30, r24
    2d32:	e0 0f       	add	r30, r16
    2d34:	f1 1f       	adc	r31, r17
    2d36:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2d38:	8a e2       	ldi	r24, 0x2A	; 42
    2d3a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e7 57       	subi	r30, 0x77	; 119
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e8       	ldi	r25, 0x80	; 128
    2d48:	ab e3       	ldi	r26, 0x3B	; 59
    2d4a:	b4 e4       	ldi	r27, 0x44	; 68
    2d4c:	80 83       	st	Z, r24
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	a2 83       	std	Z+2, r26	; 0x02
    2d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	8e 01       	movw	r16, r28
    2d56:	0b 57       	subi	r16, 0x7B	; 123
    2d58:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e7 57       	subi	r30, 0x77	; 119
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a ef       	ldi	r20, 0xFA	; 250
    2d6e:	54 e4       	ldi	r21, 0x44	; 68
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	80 83       	st	Z, r24
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	a2 83       	std	Z+2, r26	; 0x02
    2d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d82:	fe 01       	movw	r30, r28
    2d84:	eb 57       	subi	r30, 0x7B	; 123
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	44 f4       	brge	.+16     	; 0x2db0 <main+0x366>
		__ticks = 1;
    2da0:	fe 01       	movw	r30, r28
    2da2:	ed 57       	subi	r30, 0x7D	; 125
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
    2dae:	64 c0       	rjmp	.+200    	; 0x2e78 <main+0x42e>
	else if (__tmp > 65535)
    2db0:	fe 01       	movw	r30, r28
    2db2:	eb 57       	subi	r30, 0x7B	; 123
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	60 81       	ld	r22, Z
    2db8:	71 81       	ldd	r23, Z+1	; 0x01
    2dba:	82 81       	ldd	r24, Z+2	; 0x02
    2dbc:	93 81       	ldd	r25, Z+3	; 0x03
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	0c f0       	brlt	.+2      	; 0x2dd0 <main+0x386>
    2dce:	43 c0       	rjmp	.+134    	; 0x2e56 <main+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e7 57       	subi	r30, 0x77	; 119
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	60 81       	ld	r22, Z
    2dd8:	71 81       	ldd	r23, Z+1	; 0x01
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	8e 01       	movw	r16, r28
    2df0:	0d 57       	subi	r16, 0x7D	; 125
    2df2:	1f 4f       	sbci	r17, 0xFF	; 255
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	f8 01       	movw	r30, r16
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
    2e06:	1f c0       	rjmp	.+62     	; 0x2e46 <main+0x3fc>
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 57       	subi	r30, 0x7F	; 127
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	88 ec       	ldi	r24, 0xC8	; 200
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
    2e16:	fe 01       	movw	r30, r28
    2e18:	ef 57       	subi	r30, 0x7F	; 127
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <main+0x3d6>
    2e24:	fe 01       	movw	r30, r28
    2e26:	ef 57       	subi	r30, 0x7F	; 127
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	de 01       	movw	r26, r28
    2e30:	ad 57       	subi	r26, 0x7D	; 125
    2e32:	bf 4f       	sbci	r27, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	ed 57       	subi	r30, 0x7D	; 125
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	11 96       	adiw	r26, 0x01	; 1
    2e42:	9c 93       	st	X, r25
    2e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	fe 01       	movw	r30, r28
    2e48:	ed 57       	subi	r30, 0x7D	; 125
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	d1 f6       	brne	.-76     	; 0x2e08 <main+0x3be>
    2e54:	27 c0       	rjmp	.+78     	; 0x2ea4 <main+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	8e 01       	movw	r16, r28
    2e58:	0d 57       	subi	r16, 0x7D	; 125
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	eb 57       	subi	r30, 0x7B	; 123
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
    2e78:	de 01       	movw	r26, r28
    2e7a:	a1 58       	subi	r26, 0x81	; 129
    2e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ed 57       	subi	r30, 0x7D	; 125
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	8d 93       	st	X+, r24
    2e8a:	9c 93       	st	X, r25
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e1 58       	subi	r30, 0x81	; 129
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <main+0x44c>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e1 58       	subi	r30, 0x81	; 129
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
		LCD_clearScreen() ;
		if(mainSystemOption==OPEN_DOOR){
			UART_sendByte(OPEN_DOOR);
			LCD_displayString("plz enter pass:");
			LCD_moveCursor(1,0);
			for(counter=0; counter<5 ; counter++){
    2ea4:	de 01       	movw	r26, r28
    2ea6:	a4 56       	subi	r26, 0x64	; 100
    2ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e4 56       	subi	r30, 0x64	; 100
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	8c 93       	st	X, r24
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e4 56       	subi	r30, 0x64	; 100
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	85 30       	cpi	r24, 0x05	; 5
    2ec0:	08 f4       	brcc	.+2      	; 0x2ec4 <main+0x47a>
    2ec2:	2a cf       	rjmp	.-428    	; 0x2d18 <main+0x2ce>
				passWord_2[counter]=KEYPAD_getPressedKey() ;
				LCD_displayCharacter('*');
				_delay_ms(750);

			}
			while(KEYPAD_getPressedKey()!=ENTER);
    2ec4:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    2ec8:	8d 33       	cpi	r24, 0x3D	; 61
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <main+0x47a>
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e5 58       	subi	r30, 0x85	; 133
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e8       	ldi	r25, 0x80	; 128
    2ed6:	ab e3       	ldi	r26, 0x3B	; 59
    2ed8:	b4 e4       	ldi	r27, 0x44	; 68
    2eda:	80 83       	st	Z, r24
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	a2 83       	std	Z+2, r26	; 0x02
    2ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	09 58       	subi	r16, 0x89	; 137
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e5 58       	subi	r30, 0x85	; 133
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	4a ef       	ldi	r20, 0xFA	; 250
    2efc:	54 e4       	ldi	r21, 0x44	; 68
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	f8 01       	movw	r30, r16
    2f08:	80 83       	st	Z, r24
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	a2 83       	std	Z+2, r26	; 0x02
    2f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f10:	fe 01       	movw	r30, r28
    2f12:	e9 58       	subi	r30, 0x89	; 137
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	44 f4       	brge	.+16     	; 0x2f3e <main+0x4f4>
		__ticks = 1;
    2f2e:	fe 01       	movw	r30, r28
    2f30:	eb 58       	subi	r30, 0x8B	; 139
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	64 c0       	rjmp	.+200    	; 0x3006 <main+0x5bc>
	else if (__tmp > 65535)
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e9 58       	subi	r30, 0x89	; 137
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	0c f0       	brlt	.+2      	; 0x2f5e <main+0x514>
    2f5c:	43 c0       	rjmp	.+134    	; 0x2fe4 <main+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e5 58       	subi	r30, 0x85	; 133
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	0b 58       	subi	r16, 0x8B	; 139
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	1f c0       	rjmp	.+62     	; 0x2fd4 <main+0x58a>
    2f96:	fe 01       	movw	r30, r28
    2f98:	ed 58       	subi	r30, 0x8D	; 141
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 58       	subi	r30, 0x8D	; 141
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <main+0x564>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ed 58       	subi	r30, 0x8D	; 141
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbc:	de 01       	movw	r26, r28
    2fbe:	ab 58       	subi	r26, 0x8B	; 139
    2fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	eb 58       	subi	r30, 0x8B	; 139
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	9c 93       	st	X, r25
    2fd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	eb 58       	subi	r30, 0x8B	; 139
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	d1 f6       	brne	.-76     	; 0x2f96 <main+0x54c>
    2fe2:	27 c0       	rjmp	.+78     	; 0x3032 <main+0x5e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe4:	8e 01       	movw	r16, r28
    2fe6:	0b 58       	subi	r16, 0x8B	; 139
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	fe 01       	movw	r30, r28
    2fec:	e9 58       	subi	r30, 0x89	; 137
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
    3006:	de 01       	movw	r26, r28
    3008:	af 58       	subi	r26, 0x8F	; 143
    300a:	bf 4f       	sbci	r27, 0xFF	; 255
    300c:	fe 01       	movw	r30, r28
    300e:	eb 58       	subi	r30, 0x8B	; 139
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	8d 93       	st	X+, r24
    3018:	9c 93       	st	X, r25
    301a:	fe 01       	movw	r30, r28
    301c:	ef 58       	subi	r30, 0x8F	; 143
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <main+0x5da>
    3028:	fe 01       	movw	r30, r28
    302a:	ef 58       	subi	r30, 0x8F	; 143
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
			_delay_ms(750);
			UART_sendString(passWord_2);
    3032:	ce 01       	movw	r24, r28
    3034:	8a 55       	subi	r24, 0x5A	; 90
    3036:	9f 4f       	sbci	r25, 0xFF	; 255
    3038:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <UART_sendString>
			matchedFlag=UART_recieveByte() ;
    303c:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    3040:	fe 01       	movw	r30, r28
    3042:	e2 56       	subi	r30, 0x62	; 98
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 83       	st	Z, r24
			if(!matchedFlag){
    3048:	fe 01       	movw	r30, r28
    304a:	e2 56       	subi	r30, 0x62	; 98
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	88 23       	and	r24, r24
    3052:	39 f4       	brne	.+14     	; 0x3062 <main+0x618>
				matchedFlag=notMatchedProcedure();
    3054:	0e 94 02 11 	call	0x2204	; 0x2204 <notMatchedProcedure>
    3058:	fe 01       	movw	r30, r28
    305a:	e2 56       	subi	r30, 0x62	; 98
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 83       	st	Z, r24
    3060:	ca c0       	rjmp	.+404    	; 0x31f6 <main+0x7ac>
			}else{
				LCD_clearScreen();
    3062:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("TRUE");
    3066:	8c ec       	ldi	r24, 0xCC	; 204
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    306e:	fe 01       	movw	r30, r28
    3070:	e3 59       	subi	r30, 0x93	; 147
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a6 e1       	ldi	r26, 0x16	; 22
    307a:	b4 e4       	ldi	r27, 0x44	; 68
    307c:	80 83       	st	Z, r24
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	a2 83       	std	Z+2, r26	; 0x02
    3082:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3084:	8e 01       	movw	r16, r28
    3086:	07 59       	subi	r16, 0x97	; 151
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	fe 01       	movw	r30, r28
    308c:	e3 59       	subi	r30, 0x93	; 147
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 83       	st	Z, r24
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	a2 83       	std	Z+2, r26	; 0x02
    30b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b2:	fe 01       	movw	r30, r28
    30b4:	e7 59       	subi	r30, 0x97	; 151
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	44 f4       	brge	.+16     	; 0x30e0 <main+0x696>
		__ticks = 1;
    30d0:	fe 01       	movw	r30, r28
    30d2:	e9 59       	subi	r30, 0x99	; 153
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	64 c0       	rjmp	.+200    	; 0x31a8 <main+0x75e>
	else if (__tmp > 65535)
    30e0:	fe 01       	movw	r30, r28
    30e2:	e7 59       	subi	r30, 0x97	; 151
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <main+0x6b6>
    30fe:	43 c0       	rjmp	.+134    	; 0x3186 <main+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	fe 01       	movw	r30, r28
    3102:	e3 59       	subi	r30, 0x93	; 147
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	60 81       	ld	r22, Z
    3108:	71 81       	ldd	r23, Z+1	; 0x01
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	93 81       	ldd	r25, Z+3	; 0x03
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e2       	ldi	r20, 0x20	; 32
    3114:	51 e4       	ldi	r21, 0x41	; 65
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	8e 01       	movw	r16, r28
    3120:	09 59       	subi	r16, 0x99	; 153
    3122:	1f 4f       	sbci	r17, 0xFF	; 255
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	f8 01       	movw	r30, r16
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	80 83       	st	Z, r24
    3136:	1f c0       	rjmp	.+62     	; 0x3176 <main+0x72c>
    3138:	fe 01       	movw	r30, r28
    313a:	eb 59       	subi	r30, 0x9B	; 155
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	88 ec       	ldi	r24, 0xC8	; 200
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
    3146:	fe 01       	movw	r30, r28
    3148:	eb 59       	subi	r30, 0x9B	; 155
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <main+0x706>
    3154:	fe 01       	movw	r30, r28
    3156:	eb 59       	subi	r30, 0x9B	; 155
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	de 01       	movw	r26, r28
    3160:	a9 59       	subi	r26, 0x99	; 153
    3162:	bf 4f       	sbci	r27, 0xFF	; 255
    3164:	fe 01       	movw	r30, r28
    3166:	e9 59       	subi	r30, 0x99	; 153
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	91 81       	ldd	r25, Z+1	; 0x01
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	11 96       	adiw	r26, 0x01	; 1
    3172:	9c 93       	st	X, r25
    3174:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	fe 01       	movw	r30, r28
    3178:	e9 59       	subi	r30, 0x99	; 153
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	d1 f6       	brne	.-76     	; 0x3138 <main+0x6ee>
    3184:	27 c0       	rjmp	.+78     	; 0x31d4 <main+0x78a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3186:	8e 01       	movw	r16, r28
    3188:	09 59       	subi	r16, 0x99	; 153
    318a:	1f 4f       	sbci	r17, 0xFF	; 255
    318c:	fe 01       	movw	r30, r28
    318e:	e7 59       	subi	r30, 0x97	; 151
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	f8 01       	movw	r30, r16
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	de 01       	movw	r26, r28
    31aa:	ad 59       	subi	r26, 0x9D	; 157
    31ac:	bf 4f       	sbci	r27, 0xFF	; 255
    31ae:	fe 01       	movw	r30, r28
    31b0:	e9 59       	subi	r30, 0x99	; 153
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	8d 93       	st	X+, r24
    31ba:	9c 93       	st	X, r25
    31bc:	fe 01       	movw	r30, r28
    31be:	ed 59       	subi	r30, 0x9D	; 157
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 81       	ld	r24, Z
    31c4:	91 81       	ldd	r25, Z+1	; 0x01
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <main+0x77c>
    31ca:	fe 01       	movw	r30, r28
    31cc:	ed 59       	subi	r30, 0x9D	; 157
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
				_delay_ms(600);
				LCD_clearScreen();
    31d4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>

				Timer1_setCallBack(doorProcedures) ;
    31d8:	80 e4       	ldi	r24, 0x40	; 64
    31da:	92 e1       	ldi	r25, 0x12	; 18
    31dc:	0e 94 10 06 	call	0xc20	; 0xc20 <Timer1_setCallBack>
				Timer1_init(&Config);
    31e0:	89 ee       	ldi	r24, 0xE9	; 233
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>

				changed=1 ;
    31e8:	fe 01       	movw	r30, r28
    31ea:	e3 56       	subi	r30, 0x63	; 99
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	80 83       	st	Z, r24
				checkCount();
    31f2:	0e 94 a8 12 	call	0x2550	; 0x2550 <checkCount>
			}
			if(!matchedFlag){
    31f6:	fe 01       	movw	r30, r28
    31f8:	e2 56       	subi	r30, 0x62	; 98
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 81       	ld	r24, Z
    31fe:	88 23       	and	r24, r24
    3200:	09 f0       	breq	.+2      	; 0x3204 <main+0x7ba>
    3202:	bc c0       	rjmp	.+376    	; 0x337c <main+0x932>
				LCD_clearScreen();
    3204:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("INCORRECT ENTRY") ;
    3208:	81 ed       	ldi	r24, 0xD1	; 209
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    3210:	fe 01       	movw	r30, r28
    3212:	e1 5a       	subi	r30, 0xA1	; 161
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e6       	ldi	r25, 0x60	; 96
    321a:	aa e6       	ldi	r26, 0x6A	; 106
    321c:	b7 e4       	ldi	r27, 0x47	; 71
    321e:	80 83       	st	Z, r24
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	a2 83       	std	Z+2, r26	; 0x02
    3224:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	8e 01       	movw	r16, r28
    3228:	05 5a       	subi	r16, 0xA5	; 165
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e1 5a       	subi	r30, 0xA1	; 161
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	4a ef       	ldi	r20, 0xFA	; 250
    3240:	54 e4       	ldi	r21, 0x44	; 68
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	80 83       	st	Z, r24
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	a2 83       	std	Z+2, r26	; 0x02
    3252:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3254:	fe 01       	movw	r30, r28
    3256:	e5 5a       	subi	r30, 0xA5	; 165
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	60 81       	ld	r22, Z
    325c:	71 81       	ldd	r23, Z+1	; 0x01
    325e:	82 81       	ldd	r24, Z+2	; 0x02
    3260:	93 81       	ldd	r25, Z+3	; 0x03
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e8       	ldi	r20, 0x80	; 128
    3268:	5f e3       	ldi	r21, 0x3F	; 63
    326a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	44 f4       	brge	.+16     	; 0x3282 <main+0x838>
		__ticks = 1;
    3272:	fe 01       	movw	r30, r28
    3274:	e7 5a       	subi	r30, 0xA7	; 167
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
    3280:	64 c0       	rjmp	.+200    	; 0x334a <main+0x900>
	else if (__tmp > 65535)
    3282:	fe 01       	movw	r30, r28
    3284:	e5 5a       	subi	r30, 0xA5	; 165
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	60 81       	ld	r22, Z
    328a:	71 81       	ldd	r23, Z+1	; 0x01
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	0c f0       	brlt	.+2      	; 0x32a2 <main+0x858>
    32a0:	43 c0       	rjmp	.+134    	; 0x3328 <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	fe 01       	movw	r30, r28
    32a4:	e1 5a       	subi	r30, 0xA1	; 161
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	60 81       	ld	r22, Z
    32aa:	71 81       	ldd	r23, Z+1	; 0x01
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8e 01       	movw	r16, r28
    32c2:	07 5a       	subi	r16, 0xA7	; 167
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	1f c0       	rjmp	.+62     	; 0x3318 <main+0x8ce>
    32da:	fe 01       	movw	r30, r28
    32dc:	e9 5a       	subi	r30, 0xA9	; 169
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	fe 01       	movw	r30, r28
    32ea:	e9 5a       	subi	r30, 0xA9	; 169
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <main+0x8a8>
    32f6:	fe 01       	movw	r30, r28
    32f8:	e9 5a       	subi	r30, 0xA9	; 169
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3300:	de 01       	movw	r26, r28
    3302:	a7 5a       	subi	r26, 0xA7	; 167
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	e7 5a       	subi	r30, 0xA7	; 167
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	11 96       	adiw	r26, 0x01	; 1
    3314:	9c 93       	st	X, r25
    3316:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	fe 01       	movw	r30, r28
    331a:	e7 5a       	subi	r30, 0xA7	; 167
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	d1 f6       	brne	.-76     	; 0x32da <main+0x890>
    3326:	27 c0       	rjmp	.+78     	; 0x3376 <main+0x92c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	8e 01       	movw	r16, r28
    332a:	07 5a       	subi	r16, 0xA7	; 167
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	fe 01       	movw	r30, r28
    3330:	e5 5a       	subi	r30, 0xA5	; 165
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	de 01       	movw	r26, r28
    334c:	ab 5a       	subi	r26, 0xAB	; 171
    334e:	bf 4f       	sbci	r27, 0xFF	; 255
    3350:	fe 01       	movw	r30, r28
    3352:	e7 5a       	subi	r30, 0xA7	; 167
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	8d 93       	st	X+, r24
    335c:	9c 93       	st	X, r25
    335e:	fe 01       	movw	r30, r28
    3360:	eb 5a       	subi	r30, 0xAB	; 171
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <main+0x91e>
    336c:	fe 01       	movw	r30, r28
    336e:	eb 5a       	subi	r30, 0xAB	; 171
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24


				_delay_ms(60000) ;
				LCD_clearScreen();
    3376:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
    337a:	e6 cb       	rjmp	.-2100   	; 0x2b48 <main+0xfe>
			}else if (!changed){
    337c:	fe 01       	movw	r30, r28
    337e:	e3 56       	subi	r30, 0x63	; 99
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	88 23       	and	r24, r24
    3386:	09 f0       	breq	.+2      	; 0x338a <main+0x940>
    3388:	df cb       	rjmp	.-2114   	; 0x2b48 <main+0xfe>
				LCD_clearScreen();
    338a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("TRUE");
    338e:	8c ec       	ldi	r24, 0xCC	; 204
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    3396:	fe 01       	movw	r30, r28
    3398:	ef 5a       	subi	r30, 0xAF	; 175
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a6 e1       	ldi	r26, 0x16	; 22
    33a2:	b4 e4       	ldi	r27, 0x44	; 68
    33a4:	80 83       	st	Z, r24
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	a2 83       	std	Z+2, r26	; 0x02
    33aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ac:	8e 01       	movw	r16, r28
    33ae:	03 5b       	subi	r16, 0xB3	; 179
    33b0:	1f 4f       	sbci	r17, 0xFF	; 255
    33b2:	fe 01       	movw	r30, r28
    33b4:	ef 5a       	subi	r30, 0xAF	; 175
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	60 81       	ld	r22, Z
    33ba:	71 81       	ldd	r23, Z+1	; 0x01
    33bc:	82 81       	ldd	r24, Z+2	; 0x02
    33be:	93 81       	ldd	r25, Z+3	; 0x03
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4a ef       	ldi	r20, 0xFA	; 250
    33c6:	54 e4       	ldi	r21, 0x44	; 68
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	f8 01       	movw	r30, r16
    33d2:	80 83       	st	Z, r24
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	a2 83       	std	Z+2, r26	; 0x02
    33d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33da:	fe 01       	movw	r30, r28
    33dc:	e3 5b       	subi	r30, 0xB3	; 179
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	44 f4       	brge	.+16     	; 0x3408 <main+0x9be>
		__ticks = 1;
    33f8:	fe 01       	movw	r30, r28
    33fa:	e5 5b       	subi	r30, 0xB5	; 181
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	80 83       	st	Z, r24
    3406:	64 c0       	rjmp	.+200    	; 0x34d0 <main+0xa86>
	else if (__tmp > 65535)
    3408:	fe 01       	movw	r30, r28
    340a:	e3 5b       	subi	r30, 0xB3	; 179
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	60 81       	ld	r22, Z
    3410:	71 81       	ldd	r23, Z+1	; 0x01
    3412:	82 81       	ldd	r24, Z+2	; 0x02
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	0c f0       	brlt	.+2      	; 0x3428 <main+0x9de>
    3426:	43 c0       	rjmp	.+134    	; 0x34ae <main+0xa64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	fe 01       	movw	r30, r28
    342a:	ef 5a       	subi	r30, 0xAF	; 175
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8e 01       	movw	r16, r28
    3448:	05 5b       	subi	r16, 0xB5	; 181
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	f8 01       	movw	r30, r16
    345a:	91 83       	std	Z+1, r25	; 0x01
    345c:	80 83       	st	Z, r24
    345e:	1f c0       	rjmp	.+62     	; 0x349e <main+0xa54>
    3460:	fe 01       	movw	r30, r28
    3462:	e7 5b       	subi	r30, 0xB7	; 183
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	88 ec       	ldi	r24, 0xC8	; 200
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
    346e:	fe 01       	movw	r30, r28
    3470:	e7 5b       	subi	r30, 0xB7	; 183
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <main+0xa2e>
    347c:	fe 01       	movw	r30, r28
    347e:	e7 5b       	subi	r30, 0xB7	; 183
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3486:	de 01       	movw	r26, r28
    3488:	a5 5b       	subi	r26, 0xB5	; 181
    348a:	bf 4f       	sbci	r27, 0xFF	; 255
    348c:	fe 01       	movw	r30, r28
    348e:	e5 5b       	subi	r30, 0xB5	; 181
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	11 96       	adiw	r26, 0x01	; 1
    349a:	9c 93       	st	X, r25
    349c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349e:	fe 01       	movw	r30, r28
    34a0:	e5 5b       	subi	r30, 0xB5	; 181
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	d1 f6       	brne	.-76     	; 0x3460 <main+0xa16>
    34ac:	27 c0       	rjmp	.+78     	; 0x34fc <main+0xab2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	8e 01       	movw	r16, r28
    34b0:	05 5b       	subi	r16, 0xB5	; 181
    34b2:	1f 4f       	sbci	r17, 0xFF	; 255
    34b4:	fe 01       	movw	r30, r28
    34b6:	e3 5b       	subi	r30, 0xB3	; 179
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	f8 01       	movw	r30, r16
    34cc:	91 83       	std	Z+1, r25	; 0x01
    34ce:	80 83       	st	Z, r24
    34d0:	de 01       	movw	r26, r28
    34d2:	a9 5b       	subi	r26, 0xB9	; 185
    34d4:	bf 4f       	sbci	r27, 0xFF	; 255
    34d6:	fe 01       	movw	r30, r28
    34d8:	e5 5b       	subi	r30, 0xB5	; 181
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	8d 93       	st	X+, r24
    34e2:	9c 93       	st	X, r25
    34e4:	fe 01       	movw	r30, r28
    34e6:	e9 5b       	subi	r30, 0xB9	; 185
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <main+0xaa4>
    34f2:	fe 01       	movw	r30, r28
    34f4:	e9 5b       	subi	r30, 0xB9	; 185
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
				_delay_ms(600);
				LCD_clearScreen();
    34fc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				Timer1_setCallBack(doorProcedures) ;
    3500:	80 e4       	ldi	r24, 0x40	; 64
    3502:	92 e1       	ldi	r25, 0x12	; 18
    3504:	0e 94 10 06 	call	0xc20	; 0xc20 <Timer1_setCallBack>
				Timer1_init(&Config);
    3508:	89 ee       	ldi	r24, 0xE9	; 233
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
				checkCount();
    3510:	0e 94 a8 12 	call	0x2550	; 0x2550 <checkCount>
    3514:	19 cb       	rjmp	.-2510   	; 0x2b48 <main+0xfe>
			}


		}else if (mainSystemOption==CHANGE_PASSWORD){
    3516:	fe 01       	movw	r30, r28
    3518:	e5 56       	subi	r30, 0x65	; 101
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 81       	ld	r24, Z
    351e:	8d 32       	cpi	r24, 0x2D	; 45
    3520:	09 f0       	breq	.+2      	; 0x3524 <main+0xada>
    3522:	12 cb       	rjmp	.-2524   	; 0x2b48 <main+0xfe>
			UART_sendByte(CHANGE_PASSWORD);
    3524:	8d e2       	ldi	r24, 0x2D	; 45
    3526:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <UART_sendByte>
			LCD_displayString("plz enter pass:");
    352a:	80 e6       	ldi	r24, 0x60	; 96
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
			LCD_moveCursor(1,0);
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <LCD_moveCursor>
			for(counter=0; counter<5 ; counter++){
    353a:	fe 01       	movw	r30, r28
    353c:	e4 56       	subi	r30, 0x64	; 100
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	10 82       	st	Z, r1
    3542:	a1 c0       	rjmp	.+322    	; 0x3686 <main+0xc3c>
				passWord_2[counter]=KEYPAD_getPressedKey() ;
    3544:	fe 01       	movw	r30, r28
    3546:	e4 56       	subi	r30, 0x64	; 100
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	80 81       	ld	r24, Z
    354c:	08 2f       	mov	r16, r24
    354e:	10 e0       	ldi	r17, 0x00	; 0
    3550:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    3554:	28 2f       	mov	r18, r24
    3556:	ce 01       	movw	r24, r28
    3558:	8a 55       	subi	r24, 0x5A	; 90
    355a:	9f 4f       	sbci	r25, 0xFF	; 255
    355c:	fc 01       	movw	r30, r24
    355e:	e0 0f       	add	r30, r16
    3560:	f1 1f       	adc	r31, r17
    3562:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    3564:	8a e2       	ldi	r24, 0x2A	; 42
    3566:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_displayCharacter>
    356a:	fe 01       	movw	r30, r28
    356c:	ed 5b       	subi	r30, 0xBD	; 189
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e8       	ldi	r25, 0x80	; 128
    3574:	ab e3       	ldi	r26, 0x3B	; 59
    3576:	b4 e4       	ldi	r27, 0x44	; 68
    3578:	80 83       	st	Z, r24
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	a2 83       	std	Z+2, r26	; 0x02
    357e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3580:	8e 01       	movw	r16, r28
    3582:	01 5c       	subi	r16, 0xC1	; 193
    3584:	1f 4f       	sbci	r17, 0xFF	; 255
    3586:	fe 01       	movw	r30, r28
    3588:	ed 5b       	subi	r30, 0xBD	; 189
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	60 81       	ld	r22, Z
    358e:	71 81       	ldd	r23, Z+1	; 0x01
    3590:	82 81       	ldd	r24, Z+2	; 0x02
    3592:	93 81       	ldd	r25, Z+3	; 0x03
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	4a ef       	ldi	r20, 0xFA	; 250
    359a:	54 e4       	ldi	r21, 0x44	; 68
    359c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	f8 01       	movw	r30, r16
    35a6:	80 83       	st	Z, r24
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	a2 83       	std	Z+2, r26	; 0x02
    35ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ae:	fe 01       	movw	r30, r28
    35b0:	ff 96       	adiw	r30, 0x3f	; 63
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <main+0xb8a>
		__ticks = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9e af       	std	Y+62, r25	; 0x3e
    35d0:	8d af       	std	Y+61, r24	; 0x3d
    35d2:	46 c0       	rjmp	.+140    	; 0x3660 <main+0xc16>
	else if (__tmp > 65535)
    35d4:	fe 01       	movw	r30, r28
    35d6:	ff 96       	adiw	r30, 0x3f	; 63
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	64 f5       	brge	.+88     	; 0x3648 <main+0xbfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	fe 01       	movw	r30, r28
    35f2:	ed 5b       	subi	r30, 0xBD	; 189
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9e af       	std	Y+62, r25	; 0x3e
    361c:	8d af       	std	Y+61, r24	; 0x3d
    361e:	0f c0       	rjmp	.+30     	; 0x363e <main+0xbf4>
    3620:	88 ec       	ldi	r24, 0xC8	; 200
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9c af       	std	Y+60, r25	; 0x3c
    3626:	8b af       	std	Y+59, r24	; 0x3b
    3628:	8b ad       	ldd	r24, Y+59	; 0x3b
    362a:	9c ad       	ldd	r25, Y+60	; 0x3c
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <main+0xbe2>
    3630:	9c af       	std	Y+60, r25	; 0x3c
    3632:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8d ad       	ldd	r24, Y+61	; 0x3d
    3636:	9e ad       	ldd	r25, Y+62	; 0x3e
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9e af       	std	Y+62, r25	; 0x3e
    363c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3640:	9e ad       	ldd	r25, Y+62	; 0x3e
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <main+0xbd6>
    3646:	16 c0       	rjmp	.+44     	; 0x3674 <main+0xc2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	fe 01       	movw	r30, r28
    364a:	ff 96       	adiw	r30, 0x3f	; 63
    364c:	60 81       	ld	r22, Z
    364e:	71 81       	ldd	r23, Z+1	; 0x01
    3650:	82 81       	ldd	r24, Z+2	; 0x02
    3652:	93 81       	ldd	r25, Z+3	; 0x03
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	9e af       	std	Y+62, r25	; 0x3e
    365e:	8d af       	std	Y+61, r24	; 0x3d
    3660:	8d ad       	ldd	r24, Y+61	; 0x3d
    3662:	9e ad       	ldd	r25, Y+62	; 0x3e
    3664:	9a af       	std	Y+58, r25	; 0x3a
    3666:	89 af       	std	Y+57, r24	; 0x39
    3668:	89 ad       	ldd	r24, Y+57	; 0x39
    366a:	9a ad       	ldd	r25, Y+58	; 0x3a
    366c:	01 97       	sbiw	r24, 0x01	; 1
    366e:	f1 f7       	brne	.-4      	; 0x366c <main+0xc22>
    3670:	9a af       	std	Y+58, r25	; 0x3a
    3672:	89 af       	std	Y+57, r24	; 0x39

		}else if (mainSystemOption==CHANGE_PASSWORD){
			UART_sendByte(CHANGE_PASSWORD);
			LCD_displayString("plz enter pass:");
			LCD_moveCursor(1,0);
			for(counter=0; counter<5 ; counter++){
    3674:	de 01       	movw	r26, r28
    3676:	a4 56       	subi	r26, 0x64	; 100
    3678:	bf 4f       	sbci	r27, 0xFF	; 255
    367a:	fe 01       	movw	r30, r28
    367c:	e4 56       	subi	r30, 0x64	; 100
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	8f 5f       	subi	r24, 0xFF	; 255
    3684:	8c 93       	st	X, r24
    3686:	fe 01       	movw	r30, r28
    3688:	e4 56       	subi	r30, 0x64	; 100
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	85 30       	cpi	r24, 0x05	; 5
    3690:	08 f4       	brcc	.+2      	; 0x3694 <main+0xc4a>
    3692:	58 cf       	rjmp	.-336    	; 0x3544 <main+0xafa>
				passWord_2[counter]=KEYPAD_getPressedKey() ;
				LCD_displayCharacter('*');
				_delay_ms(750);

			}
			while(KEYPAD_getPressedKey()!=ENTER);
    3694:	0e 94 c6 09 	call	0x138c	; 0x138c <KEYPAD_getPressedKey>
    3698:	8d 33       	cpi	r24, 0x3D	; 61
    369a:	e1 f7       	brne	.-8      	; 0x3694 <main+0xc4a>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e8       	ldi	r25, 0x80	; 128
    36a0:	ab e3       	ldi	r26, 0x3B	; 59
    36a2:	b4 e4       	ldi	r27, 0x44	; 68
    36a4:	8d ab       	std	Y+53, r24	; 0x35
    36a6:	9e ab       	std	Y+54, r25	; 0x36
    36a8:	af ab       	std	Y+55, r26	; 0x37
    36aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ac:	6d a9       	ldd	r22, Y+53	; 0x35
    36ae:	7e a9       	ldd	r23, Y+54	; 0x36
    36b0:	8f a9       	ldd	r24, Y+55	; 0x37
    36b2:	98 ad       	ldd	r25, Y+56	; 0x38
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	4a ef       	ldi	r20, 0xFA	; 250
    36ba:	54 e4       	ldi	r21, 0x44	; 68
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	89 ab       	std	Y+49, r24	; 0x31
    36c6:	9a ab       	std	Y+50, r25	; 0x32
    36c8:	ab ab       	std	Y+51, r26	; 0x33
    36ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36cc:	69 a9       	ldd	r22, Y+49	; 0x31
    36ce:	7a a9       	ldd	r23, Y+50	; 0x32
    36d0:	8b a9       	ldd	r24, Y+51	; 0x33
    36d2:	9c a9       	ldd	r25, Y+52	; 0x34
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e0:	88 23       	and	r24, r24
    36e2:	2c f4       	brge	.+10     	; 0x36ee <main+0xca4>
		__ticks = 1;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	98 ab       	std	Y+48, r25	; 0x30
    36ea:	8f a7       	std	Y+47, r24	; 0x2f
    36ec:	3f c0       	rjmp	.+126    	; 0x376c <main+0xd22>
	else if (__tmp > 65535)
    36ee:	69 a9       	ldd	r22, Y+49	; 0x31
    36f0:	7a a9       	ldd	r23, Y+50	; 0x32
    36f2:	8b a9       	ldd	r24, Y+51	; 0x33
    36f4:	9c a9       	ldd	r25, Y+52	; 0x34
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	3f ef       	ldi	r19, 0xFF	; 255
    36fa:	4f e7       	ldi	r20, 0x7F	; 127
    36fc:	57 e4       	ldi	r21, 0x47	; 71
    36fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3702:	18 16       	cp	r1, r24
    3704:	4c f5       	brge	.+82     	; 0x3758 <main+0xd0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3706:	6d a9       	ldd	r22, Y+53	; 0x35
    3708:	7e a9       	ldd	r23, Y+54	; 0x36
    370a:	8f a9       	ldd	r24, Y+55	; 0x37
    370c:	98 ad       	ldd	r25, Y+56	; 0x38
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e2       	ldi	r20, 0x20	; 32
    3714:	51 e4       	ldi	r21, 0x41	; 65
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	98 ab       	std	Y+48, r25	; 0x30
    372c:	8f a7       	std	Y+47, r24	; 0x2f
    372e:	0f c0       	rjmp	.+30     	; 0x374e <main+0xd04>
    3730:	88 ec       	ldi	r24, 0xC8	; 200
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9e a7       	std	Y+46, r25	; 0x2e
    3736:	8d a7       	std	Y+45, r24	; 0x2d
    3738:	8d a5       	ldd	r24, Y+45	; 0x2d
    373a:	9e a5       	ldd	r25, Y+46	; 0x2e
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <main+0xcf2>
    3740:	9e a7       	std	Y+46, r25	; 0x2e
    3742:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3744:	8f a5       	ldd	r24, Y+47	; 0x2f
    3746:	98 a9       	ldd	r25, Y+48	; 0x30
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	98 ab       	std	Y+48, r25	; 0x30
    374c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3750:	98 a9       	ldd	r25, Y+48	; 0x30
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	69 f7       	brne	.-38     	; 0x3730 <main+0xce6>
    3756:	14 c0       	rjmp	.+40     	; 0x3780 <main+0xd36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3758:	69 a9       	ldd	r22, Y+49	; 0x31
    375a:	7a a9       	ldd	r23, Y+50	; 0x32
    375c:	8b a9       	ldd	r24, Y+51	; 0x33
    375e:	9c a9       	ldd	r25, Y+52	; 0x34
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	98 ab       	std	Y+48, r25	; 0x30
    376a:	8f a7       	std	Y+47, r24	; 0x2f
    376c:	8f a5       	ldd	r24, Y+47	; 0x2f
    376e:	98 a9       	ldd	r25, Y+48	; 0x30
    3770:	9c a7       	std	Y+44, r25	; 0x2c
    3772:	8b a7       	std	Y+43, r24	; 0x2b
    3774:	8b a5       	ldd	r24, Y+43	; 0x2b
    3776:	9c a5       	ldd	r25, Y+44	; 0x2c
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <main+0xd2e>
    377c:	9c a7       	std	Y+44, r25	; 0x2c
    377e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(750);
			UART_sendString(passWord_2);
    3780:	ce 01       	movw	r24, r28
    3782:	8a 55       	subi	r24, 0x5A	; 90
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <UART_sendString>
			matchedFlag=UART_recieveByte() ;
    378a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    378e:	fe 01       	movw	r30, r28
    3790:	e2 56       	subi	r30, 0x62	; 98
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 83       	st	Z, r24
			if(!matchedFlag){
    3796:	fe 01       	movw	r30, r28
    3798:	e2 56       	subi	r30, 0x62	; 98
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	88 23       	and	r24, r24
    37a0:	39 f4       	brne	.+14     	; 0x37b0 <main+0xd66>
				matchedFlag=notMatchedProcedure();
    37a2:	0e 94 02 11 	call	0x2204	; 0x2204 <notMatchedProcedure>
    37a6:	fe 01       	movw	r30, r28
    37a8:	e2 56       	subi	r30, 0x62	; 98
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 83       	st	Z, r24
    37ae:	81 c0       	rjmp	.+258    	; 0x38b2 <main+0xe68>
			}else{
				LCD_clearScreen();
    37b0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("TRUE");
    37b4:	8c ec       	ldi	r24, 0xCC	; 204
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	a6 e1       	ldi	r26, 0x16	; 22
    37c2:	b4 e4       	ldi	r27, 0x44	; 68
    37c4:	8f a3       	std	Y+39, r24	; 0x27
    37c6:	98 a7       	std	Y+40, r25	; 0x28
    37c8:	a9 a7       	std	Y+41, r26	; 0x29
    37ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37cc:	6f a1       	ldd	r22, Y+39	; 0x27
    37ce:	78 a5       	ldd	r23, Y+40	; 0x28
    37d0:	89 a5       	ldd	r24, Y+41	; 0x29
    37d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	4a ef       	ldi	r20, 0xFA	; 250
    37da:	54 e4       	ldi	r21, 0x44	; 68
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	8b a3       	std	Y+35, r24	; 0x23
    37e6:	9c a3       	std	Y+36, r25	; 0x24
    37e8:	ad a3       	std	Y+37, r26	; 0x25
    37ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ec:	6b a1       	ldd	r22, Y+35	; 0x23
    37ee:	7c a1       	ldd	r23, Y+36	; 0x24
    37f0:	8d a1       	ldd	r24, Y+37	; 0x25
    37f2:	9e a1       	ldd	r25, Y+38	; 0x26
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e8       	ldi	r20, 0x80	; 128
    37fa:	5f e3       	ldi	r21, 0x3F	; 63
    37fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3800:	88 23       	and	r24, r24
    3802:	2c f4       	brge	.+10     	; 0x380e <main+0xdc4>
		__ticks = 1;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	9a a3       	std	Y+34, r25	; 0x22
    380a:	89 a3       	std	Y+33, r24	; 0x21
    380c:	3f c0       	rjmp	.+126    	; 0x388c <main+0xe42>
	else if (__tmp > 65535)
    380e:	6b a1       	ldd	r22, Y+35	; 0x23
    3810:	7c a1       	ldd	r23, Y+36	; 0x24
    3812:	8d a1       	ldd	r24, Y+37	; 0x25
    3814:	9e a1       	ldd	r25, Y+38	; 0x26
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	57 e4       	ldi	r21, 0x47	; 71
    381e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3822:	18 16       	cp	r1, r24
    3824:	4c f5       	brge	.+82     	; 0x3878 <main+0xe2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3826:	6f a1       	ldd	r22, Y+39	; 0x27
    3828:	78 a5       	ldd	r23, Y+40	; 0x28
    382a:	89 a5       	ldd	r24, Y+41	; 0x29
    382c:	9a a5       	ldd	r25, Y+42	; 0x2a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e2       	ldi	r20, 0x20	; 32
    3834:	51 e4       	ldi	r21, 0x41	; 65
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	bc 01       	movw	r22, r24
    3840:	cd 01       	movw	r24, r26
    3842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	9a a3       	std	Y+34, r25	; 0x22
    384c:	89 a3       	std	Y+33, r24	; 0x21
    384e:	0f c0       	rjmp	.+30     	; 0x386e <main+0xe24>
    3850:	88 ec       	ldi	r24, 0xC8	; 200
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	98 a3       	std	Y+32, r25	; 0x20
    3856:	8f 8f       	std	Y+31, r24	; 0x1f
    3858:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385a:	98 a1       	ldd	r25, Y+32	; 0x20
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <main+0xe12>
    3860:	98 a3       	std	Y+32, r25	; 0x20
    3862:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3864:	89 a1       	ldd	r24, Y+33	; 0x21
    3866:	9a a1       	ldd	r25, Y+34	; 0x22
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	9a a3       	std	Y+34, r25	; 0x22
    386c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386e:	89 a1       	ldd	r24, Y+33	; 0x21
    3870:	9a a1       	ldd	r25, Y+34	; 0x22
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	69 f7       	brne	.-38     	; 0x3850 <main+0xe06>
    3876:	14 c0       	rjmp	.+40     	; 0x38a0 <main+0xe56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3878:	6b a1       	ldd	r22, Y+35	; 0x23
    387a:	7c a1       	ldd	r23, Y+36	; 0x24
    387c:	8d a1       	ldd	r24, Y+37	; 0x25
    387e:	9e a1       	ldd	r25, Y+38	; 0x26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9a a3       	std	Y+34, r25	; 0x22
    388a:	89 a3       	std	Y+33, r24	; 0x21
    388c:	89 a1       	ldd	r24, Y+33	; 0x21
    388e:	9a a1       	ldd	r25, Y+34	; 0x22
    3890:	9e 8f       	std	Y+30, r25	; 0x1e
    3892:	8d 8f       	std	Y+29, r24	; 0x1d
    3894:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3896:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	f1 f7       	brne	.-4      	; 0x3898 <main+0xe4e>
    389c:	9e 8f       	std	Y+30, r25	; 0x1e
    389e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(600);
				LCD_clearScreen();
    38a0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				addNewPassword() ;
    38a4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <addNewPassword>
				changed=1;
    38a8:	fe 01       	movw	r30, r28
    38aa:	e3 56       	subi	r30, 0x63	; 99
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 83       	st	Z, r24

			}
			if(!matchedFlag){
    38b2:	fe 01       	movw	r30, r28
    38b4:	e2 56       	subi	r30, 0x62	; 98
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	88 23       	and	r24, r24
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <main+0xe76>
    38be:	7b c0       	rjmp	.+246    	; 0x39b6 <main+0xf6c>
				LCD_clearScreen();
    38c0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("INCORRECT ENTRY") ;
    38c4:	81 ed       	ldi	r24, 0xD1	; 209
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	90 e6       	ldi	r25, 0x60	; 96
    38d0:	aa e6       	ldi	r26, 0x6A	; 106
    38d2:	b7 e4       	ldi	r27, 0x47	; 71
    38d4:	89 8f       	std	Y+25, r24	; 0x19
    38d6:	9a 8f       	std	Y+26, r25	; 0x1a
    38d8:	ab 8f       	std	Y+27, r26	; 0x1b
    38da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38dc:	69 8d       	ldd	r22, Y+25	; 0x19
    38de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	4a ef       	ldi	r20, 0xFA	; 250
    38ea:	54 e4       	ldi	r21, 0x44	; 68
    38ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	8d 8b       	std	Y+21, r24	; 0x15
    38f6:	9e 8b       	std	Y+22, r25	; 0x16
    38f8:	af 8b       	std	Y+23, r26	; 0x17
    38fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38fc:	6d 89       	ldd	r22, Y+21	; 0x15
    38fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3900:	8f 89       	ldd	r24, Y+23	; 0x17
    3902:	98 8d       	ldd	r25, Y+24	; 0x18
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	40 e8       	ldi	r20, 0x80	; 128
    390a:	5f e3       	ldi	r21, 0x3F	; 63
    390c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3910:	88 23       	and	r24, r24
    3912:	2c f4       	brge	.+10     	; 0x391e <main+0xed4>
		__ticks = 1;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	9c 8b       	std	Y+20, r25	; 0x14
    391a:	8b 8b       	std	Y+19, r24	; 0x13
    391c:	3f c0       	rjmp	.+126    	; 0x399c <main+0xf52>
	else if (__tmp > 65535)
    391e:	6d 89       	ldd	r22, Y+21	; 0x15
    3920:	7e 89       	ldd	r23, Y+22	; 0x16
    3922:	8f 89       	ldd	r24, Y+23	; 0x17
    3924:	98 8d       	ldd	r25, Y+24	; 0x18
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	3f ef       	ldi	r19, 0xFF	; 255
    392a:	4f e7       	ldi	r20, 0x7F	; 127
    392c:	57 e4       	ldi	r21, 0x47	; 71
    392e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3932:	18 16       	cp	r1, r24
    3934:	4c f5       	brge	.+82     	; 0x3988 <main+0xf3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3936:	69 8d       	ldd	r22, Y+25	; 0x19
    3938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e2       	ldi	r20, 0x20	; 32
    3944:	51 e4       	ldi	r21, 0x41	; 65
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	bc 01       	movw	r22, r24
    3950:	cd 01       	movw	r24, r26
    3952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	9c 8b       	std	Y+20, r25	; 0x14
    395c:	8b 8b       	std	Y+19, r24	; 0x13
    395e:	0f c0       	rjmp	.+30     	; 0x397e <main+0xf34>
    3960:	88 ec       	ldi	r24, 0xC8	; 200
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	9a 8b       	std	Y+18, r25	; 0x12
    3966:	89 8b       	std	Y+17, r24	; 0x11
    3968:	89 89       	ldd	r24, Y+17	; 0x11
    396a:	9a 89       	ldd	r25, Y+18	; 0x12
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <main+0xf22>
    3970:	9a 8b       	std	Y+18, r25	; 0x12
    3972:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3974:	8b 89       	ldd	r24, Y+19	; 0x13
    3976:	9c 89       	ldd	r25, Y+20	; 0x14
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	9c 8b       	std	Y+20, r25	; 0x14
    397c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397e:	8b 89       	ldd	r24, Y+19	; 0x13
    3980:	9c 89       	ldd	r25, Y+20	; 0x14
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	69 f7       	brne	.-38     	; 0x3960 <main+0xf16>
    3986:	14 c0       	rjmp	.+40     	; 0x39b0 <main+0xf66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3988:	6d 89       	ldd	r22, Y+21	; 0x15
    398a:	7e 89       	ldd	r23, Y+22	; 0x16
    398c:	8f 89       	ldd	r24, Y+23	; 0x17
    398e:	98 8d       	ldd	r25, Y+24	; 0x18
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9c 8b       	std	Y+20, r25	; 0x14
    399a:	8b 8b       	std	Y+19, r24	; 0x13
    399c:	8b 89       	ldd	r24, Y+19	; 0x13
    399e:	9c 89       	ldd	r25, Y+20	; 0x14
    39a0:	98 8b       	std	Y+16, r25	; 0x10
    39a2:	8f 87       	std	Y+15, r24	; 0x0f
    39a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a6:	98 89       	ldd	r25, Y+16	; 0x10
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <main+0xf5e>
    39ac:	98 8b       	std	Y+16, r25	; 0x10
    39ae:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(60000) ;
				LCD_clearScreen();
    39b0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
    39b4:	c9 c8       	rjmp	.-3694   	; 0x2b48 <main+0xfe>

			}else if(!changed){
    39b6:	fe 01       	movw	r30, r28
    39b8:	e3 56       	subi	r30, 0x63	; 99
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	80 81       	ld	r24, Z
    39be:	88 23       	and	r24, r24
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <main+0xf7a>
    39c2:	c2 c8       	rjmp	.-3708   	; 0x2b48 <main+0xfe>
				changed=1 ;
    39c4:	fe 01       	movw	r30, r28
    39c6:	e3 56       	subi	r30, 0x63	; 99
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	80 83       	st	Z, r24
				LCD_clearScreen();
    39ce:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				LCD_displayString("TRUE");
    39d2:	8c ec       	ldi	r24, 0xCC	; 204
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <LCD_displayString>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a6 e1       	ldi	r26, 0x16	; 22
    39e0:	b4 e4       	ldi	r27, 0x44	; 68
    39e2:	8b 87       	std	Y+11, r24	; 0x0b
    39e4:	9c 87       	std	Y+12, r25	; 0x0c
    39e6:	ad 87       	std	Y+13, r26	; 0x0d
    39e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	4a ef       	ldi	r20, 0xFA	; 250
    39f8:	54 e4       	ldi	r21, 0x44	; 68
    39fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	8f 83       	std	Y+7, r24	; 0x07
    3a04:	98 87       	std	Y+8, r25	; 0x08
    3a06:	a9 87       	std	Y+9, r26	; 0x09
    3a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0c:	78 85       	ldd	r23, Y+8	; 0x08
    3a0e:	89 85       	ldd	r24, Y+9	; 0x09
    3a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	5f e3       	ldi	r21, 0x3F	; 63
    3a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a1e:	88 23       	and	r24, r24
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <main+0xfe2>
		__ticks = 1;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <main+0x1060>
	else if (__tmp > 65535)
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	4c f5       	brge	.+82     	; 0x3a96 <main+0x104c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	9e 83       	std	Y+6, r25	; 0x06
    3a6a:	8d 83       	std	Y+5, r24	; 0x05
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <main+0x1042>
    3a6e:	88 ec       	ldi	r24, 0xC8	; 200
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9c 83       	std	Y+4, r25	; 0x04
    3a74:	8b 83       	std	Y+3, r24	; 0x03
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <main+0x1030>
    3a7e:	9c 83       	std	Y+4, r25	; 0x04
    3a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	69 f7       	brne	.-38     	; 0x3a6e <main+0x1024>
    3a94:	14 c0       	rjmp	.+40     	; 0x3abe <main+0x1074>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a96:	6f 81       	ldd	r22, Y+7	; 0x07
    3a98:	78 85       	ldd	r23, Y+8	; 0x08
    3a9a:	89 85       	ldd	r24, Y+9	; 0x09
    3a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9e 83       	std	Y+6, r25	; 0x06
    3aa8:	8d 83       	std	Y+5, r24	; 0x05
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	9a 83       	std	Y+2, r25	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <main+0x106c>
    3aba:	9a 83       	std	Y+2, r25	; 0x02
    3abc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(600);
				LCD_clearScreen();
    3abe:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_clearScreen>
				addNewPassword() ;
    3ac2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <addNewPassword>
    3ac6:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <main+0xfe>

00003aca <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <UART_init+0x6>
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <UART_init+0x8>
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	9c 83       	std	Y+4, r25	; 0x04
    3ad8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3ada:	1a 82       	std	Y+2, r1	; 0x02
    3adc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3ade:	eb e2       	ldi	r30, 0x2B	; 43
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(((Config_Ptr->bit_data)>>2)<<UCSZ2);
    3ae6:	aa e2       	ldi	r26, 0x2A	; 42
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	eb 81       	ldd	r30, Y+3	; 0x03
    3aec:	fc 81       	ldd	r31, Y+4	; 0x04
    3aee:	80 81       	ld	r24, Z
    3af0:	86 95       	lsr	r24
    3af2:	86 95       	lsr	r24
    3af4:	88 2f       	mov	r24, r24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	88 61       	ori	r24, 0x18	; 24
    3b02:	8c 93       	st	X, r24
	 * USBS    = Configurations number of stop bits
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ********************************************************;***************/
	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|((Config_Ptr->parity)<<4)|((Config_Ptr->stop_bit)<<3)|(((Config_Ptr->bit_data)&3)<<1);
    3b04:	a0 e4       	ldi	r26, 0x40	; 64
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	eb 81       	ldd	r30, Y+3	; 0x03
    3b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b0c:	81 81       	ldd	r24, Z+1	; 0x01
    3b0e:	88 2f       	mov	r24, r24
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	82 95       	swap	r24
    3b14:	92 95       	swap	r25
    3b16:	90 7f       	andi	r25, 0xF0	; 240
    3b18:	98 27       	eor	r25, r24
    3b1a:	80 7f       	andi	r24, 0xF0	; 240
    3b1c:	98 27       	eor	r25, r24
    3b1e:	28 2f       	mov	r18, r24
    3b20:	26 68       	ori	r18, 0x86	; 134
    3b22:	eb 81       	ldd	r30, Y+3	; 0x03
    3b24:	fc 81       	ldd	r31, Y+4	; 0x04
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	88 2f       	mov	r24, r24
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	88 0f       	add	r24, r24
    3b2e:	99 1f       	adc	r25, r25
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	88 0f       	add	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	28 2b       	or	r18, r24
    3b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b3e:	80 81       	ld	r24, Z
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	83 70       	andi	r24, 0x03	; 3
    3b46:	90 70       	andi	r25, 0x00	; 0
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	82 2b       	or	r24, r18
    3b4e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3b50:	eb 81       	ldd	r30, Y+3	; 0x03
    3b52:	fc 81       	ldd	r31, Y+4	; 0x04
    3b54:	83 81       	ldd	r24, Z+3	; 0x03
    3b56:	94 81       	ldd	r25, Z+4	; 0x04
    3b58:	a5 81       	ldd	r26, Z+5	; 0x05
    3b5a:	b6 81       	ldd	r27, Z+6	; 0x06
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	aa 1f       	adc	r26, r26
    3b62:	bb 1f       	adc	r27, r27
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	aa 1f       	adc	r26, r26
    3b6a:	bb 1f       	adc	r27, r27
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	aa 1f       	adc	r26, r26
    3b72:	bb 1f       	adc	r27, r27
    3b74:	9c 01       	movw	r18, r24
    3b76:	ad 01       	movw	r20, r26
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	92 e1       	ldi	r25, 0x12	; 18
    3b7c:	aa e7       	ldi	r26, 0x7A	; 122
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__udivmodsi4>
    3b88:	da 01       	movw	r26, r20
    3b8a:	c9 01       	movw	r24, r18
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b92:	e0 e4       	ldi	r30, 0x40	; 64
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9a:	89 2f       	mov	r24, r25
    3b9c:	99 27       	eor	r25, r25
    3b9e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3ba0:	e9 e2       	ldi	r30, 0x29	; 41
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	80 83       	st	Z, r24
}
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3bc2:	eb e2       	ldi	r30, 0x2B	; 43
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	80 81       	ld	r24, Z
    3bc8:	88 2f       	mov	r24, r24
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	80 72       	andi	r24, 0x20	; 32
    3bce:	90 70       	andi	r25, 0x00	; 0
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	b9 f3       	breq	.-18     	; 0x3bc2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3bd4:	ec e2       	ldi	r30, 0x2C	; 44
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3bdc:	0f 90       	pop	r0
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3bec:	eb e2       	ldi	r30, 0x2B	; 43
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	88 23       	and	r24, r24
    3bf4:	dc f7       	brge	.-10     	; 0x3bec <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3bf6:	ec e2       	ldi	r30, 0x2C	; 44
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
}
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <UART_sendString+0x6>
    3c08:	0f 92       	push	r0
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	9b 83       	std	Y+3, r25	; 0x03
    3c10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c12:	19 82       	std	Y+1, r1	; 0x01
    3c14:	0e c0       	rjmp	.+28     	; 0x3c32 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '#')
	{
		UART_sendByte(Str[i]);
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	fc 01       	movw	r30, r24
    3c22:	e2 0f       	add	r30, r18
    3c24:	f3 1f       	adc	r31, r19
    3c26:	80 81       	ld	r24, Z
    3c28:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <UART_sendByte>
		i++;
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	8f 5f       	subi	r24, 0xFF	; 255
    3c30:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '#')
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	e2 0f       	add	r30, r18
    3c40:	f3 1f       	adc	r31, r19
    3c42:	80 81       	ld	r24, Z
    3c44:	83 32       	cpi	r24, 0x23	; 35
    3c46:	39 f7       	brne	.-50     	; 0x3c16 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    3c48:	83 e2       	ldi	r24, 0x23	; 35
    3c4a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	df 93       	push	r29
    3c60:	cf 93       	push	r28
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <UART_receiveString+0xa>
    3c64:	0f 92       	push	r0
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	9b 83       	std	Y+3, r25	; 0x03
    3c6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c6e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	28 2f       	mov	r18, r24
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7a:	8c 01       	movw	r16, r24
    3c7c:	02 0f       	add	r16, r18
    3c7e:	13 1f       	adc	r17, r19
    3c80:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    3c84:	f8 01       	movw	r30, r16
    3c86:	80 83       	st	Z, r24
    3c88:	0f c0       	rjmp	.+30     	; 0x3ca8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3c8a:	89 81       	ldd	r24, Y+1	; 0x01
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9a:	8c 01       	movw	r16, r24
    3c9c:	02 0f       	add	r16, r18
    3c9e:	13 1f       	adc	r17, r19
    3ca0:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <UART_recieveByte>
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	28 2f       	mov	r18, r24
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e2 0f       	add	r30, r18
    3cb6:	f3 1f       	adc	r31, r19
    3cb8:	80 81       	ld	r24, Z
    3cba:	83 32       	cpi	r24, 0x23	; 35
    3cbc:	31 f7       	brne	.-52     	; 0x3c8a <UART_receiveString+0x30>
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	/*Str[i] = '\0';*/
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	08 95       	ret

00003cce <__udivmodsi4>:
    3cce:	a1 e2       	ldi	r26, 0x21	; 33
    3cd0:	1a 2e       	mov	r1, r26
    3cd2:	aa 1b       	sub	r26, r26
    3cd4:	bb 1b       	sub	r27, r27
    3cd6:	fd 01       	movw	r30, r26
    3cd8:	0d c0       	rjmp	.+26     	; 0x3cf4 <__udivmodsi4_ep>

00003cda <__udivmodsi4_loop>:
    3cda:	aa 1f       	adc	r26, r26
    3cdc:	bb 1f       	adc	r27, r27
    3cde:	ee 1f       	adc	r30, r30
    3ce0:	ff 1f       	adc	r31, r31
    3ce2:	a2 17       	cp	r26, r18
    3ce4:	b3 07       	cpc	r27, r19
    3ce6:	e4 07       	cpc	r30, r20
    3ce8:	f5 07       	cpc	r31, r21
    3cea:	20 f0       	brcs	.+8      	; 0x3cf4 <__udivmodsi4_ep>
    3cec:	a2 1b       	sub	r26, r18
    3cee:	b3 0b       	sbc	r27, r19
    3cf0:	e4 0b       	sbc	r30, r20
    3cf2:	f5 0b       	sbc	r31, r21

00003cf4 <__udivmodsi4_ep>:
    3cf4:	66 1f       	adc	r22, r22
    3cf6:	77 1f       	adc	r23, r23
    3cf8:	88 1f       	adc	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	1a 94       	dec	r1
    3cfe:	69 f7       	brne	.-38     	; 0x3cda <__udivmodsi4_loop>
    3d00:	60 95       	com	r22
    3d02:	70 95       	com	r23
    3d04:	80 95       	com	r24
    3d06:	90 95       	com	r25
    3d08:	9b 01       	movw	r18, r22
    3d0a:	ac 01       	movw	r20, r24
    3d0c:	bd 01       	movw	r22, r26
    3d0e:	cf 01       	movw	r24, r30
    3d10:	08 95       	ret

00003d12 <__prologue_saves__>:
    3d12:	2f 92       	push	r2
    3d14:	3f 92       	push	r3
    3d16:	4f 92       	push	r4
    3d18:	5f 92       	push	r5
    3d1a:	6f 92       	push	r6
    3d1c:	7f 92       	push	r7
    3d1e:	8f 92       	push	r8
    3d20:	9f 92       	push	r9
    3d22:	af 92       	push	r10
    3d24:	bf 92       	push	r11
    3d26:	cf 92       	push	r12
    3d28:	df 92       	push	r13
    3d2a:	ef 92       	push	r14
    3d2c:	ff 92       	push	r15
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	ca 1b       	sub	r28, r26
    3d3c:	db 0b       	sbc	r29, r27
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	09 94       	ijmp

00003d4a <__epilogue_restores__>:
    3d4a:	2a 88       	ldd	r2, Y+18	; 0x12
    3d4c:	39 88       	ldd	r3, Y+17	; 0x11
    3d4e:	48 88       	ldd	r4, Y+16	; 0x10
    3d50:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d52:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d54:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d56:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d58:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d5c:	b9 84       	ldd	r11, Y+9	; 0x09
    3d5e:	c8 84       	ldd	r12, Y+8	; 0x08
    3d60:	df 80       	ldd	r13, Y+7	; 0x07
    3d62:	ee 80       	ldd	r14, Y+6	; 0x06
    3d64:	fd 80       	ldd	r15, Y+5	; 0x05
    3d66:	0c 81       	ldd	r16, Y+4	; 0x04
    3d68:	1b 81       	ldd	r17, Y+3	; 0x03
    3d6a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d6c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d6e:	ce 0f       	add	r28, r30
    3d70:	d1 1d       	adc	r29, r1
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	ed 01       	movw	r28, r26
    3d7e:	08 95       	ret

00003d80 <itoa>:
    3d80:	fb 01       	movw	r30, r22
    3d82:	9f 01       	movw	r18, r30
    3d84:	e8 94       	clt
    3d86:	42 30       	cpi	r20, 0x02	; 2
    3d88:	c4 f0       	brlt	.+48     	; 0x3dba <itoa+0x3a>
    3d8a:	45 32       	cpi	r20, 0x25	; 37
    3d8c:	b4 f4       	brge	.+44     	; 0x3dba <itoa+0x3a>
    3d8e:	4a 30       	cpi	r20, 0x0A	; 10
    3d90:	29 f4       	brne	.+10     	; 0x3d9c <itoa+0x1c>
    3d92:	97 fb       	bst	r25, 7
    3d94:	1e f4       	brtc	.+6      	; 0x3d9c <itoa+0x1c>
    3d96:	90 95       	com	r25
    3d98:	81 95       	neg	r24
    3d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9c:	64 2f       	mov	r22, r20
    3d9e:	77 27       	eor	r23, r23
    3da0:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__udivmodhi4>
    3da4:	80 5d       	subi	r24, 0xD0	; 208
    3da6:	8a 33       	cpi	r24, 0x3A	; 58
    3da8:	0c f0       	brlt	.+2      	; 0x3dac <itoa+0x2c>
    3daa:	89 5d       	subi	r24, 0xD9	; 217
    3dac:	81 93       	st	Z+, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	a1 f7       	brne	.-24     	; 0x3d9c <itoa+0x1c>
    3db4:	16 f4       	brtc	.+4      	; 0x3dba <itoa+0x3a>
    3db6:	5d e2       	ldi	r21, 0x2D	; 45
    3db8:	51 93       	st	Z+, r21
    3dba:	10 82       	st	Z, r1
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <strrev>

00003dc2 <strrev>:
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	67 2f       	mov	r22, r23
    3dc8:	71 91       	ld	r23, Z+
    3dca:	77 23       	and	r23, r23
    3dcc:	e1 f7       	brne	.-8      	; 0x3dc6 <strrev+0x4>
    3dce:	32 97       	sbiw	r30, 0x02	; 2
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <strrev+0x18>
    3dd2:	7c 91       	ld	r23, X
    3dd4:	6d 93       	st	X+, r22
    3dd6:	70 83       	st	Z, r23
    3dd8:	62 91       	ld	r22, -Z
    3dda:	ae 17       	cp	r26, r30
    3ddc:	bf 07       	cpc	r27, r31
    3dde:	c8 f3       	brcs	.-14     	; 0x3dd2 <strrev+0x10>
    3de0:	08 95       	ret

00003de2 <__udivmodhi4>:
    3de2:	aa 1b       	sub	r26, r26
    3de4:	bb 1b       	sub	r27, r27
    3de6:	51 e1       	ldi	r21, 0x11	; 17
    3de8:	07 c0       	rjmp	.+14     	; 0x3df8 <__udivmodhi4_ep>

00003dea <__udivmodhi4_loop>:
    3dea:	aa 1f       	adc	r26, r26
    3dec:	bb 1f       	adc	r27, r27
    3dee:	a6 17       	cp	r26, r22
    3df0:	b7 07       	cpc	r27, r23
    3df2:	10 f0       	brcs	.+4      	; 0x3df8 <__udivmodhi4_ep>
    3df4:	a6 1b       	sub	r26, r22
    3df6:	b7 0b       	sbc	r27, r23

00003df8 <__udivmodhi4_ep>:
    3df8:	88 1f       	adc	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	5a 95       	dec	r21
    3dfe:	a9 f7       	brne	.-22     	; 0x3dea <__udivmodhi4_loop>
    3e00:	80 95       	com	r24
    3e02:	90 95       	com	r25
    3e04:	bc 01       	movw	r22, r24
    3e06:	cd 01       	movw	r24, r26
    3e08:	08 95       	ret

00003e0a <_exit>:
    3e0a:	f8 94       	cli

00003e0c <__stop_program>:
    3e0c:	ff cf       	rjmp	.-2      	; 0x3e0c <__stop_program>
